{"ast":null,"code":"\"use strict\";\n\n/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OK = OK;\nexports.ERR = ERR;\nexports.unwrap = unwrap;\nexports.unwrapAsync = unwrapAsync;\nfunction OK(value) {\n  return {\n    ok: true,\n    value\n  };\n}\nfunction ERR(error) {\n  return {\n    ok: false,\n    error\n  };\n}\n/**\n * unwrap is a convenience function for extracting a value from a result or\n * throwing if there was an error.\n */\nfunction unwrap(r) {\n  if (!r.ok) {\n    throw r.error;\n  }\n  return r.value;\n}\n/**\n * unwrapAsync is a convenience function for resolving a value from a Promise\n * of a result or rejecting if an error occurred.\n */\nasync function unwrapAsync(pr) {\n  const r = await pr;\n  if (!r.ok) {\n    throw r.error;\n  }\n  return r.value;\n}","map":{"version":3,"names":["exports","OK","ERR","unwrap","unwrapAsync","value","ok","error","r","pr"],"sources":["/Users/emilijablinkeviciute/Desktop/REPOS/Visualisers project/final-project-the-visualisers/my-app/node_modules/@mistralai/mistralai/src/types/fp.ts"],"sourcesContent":["/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\n/**\n * A monad that captures the result of a function call or an error if it was not\n * successful. Railway programming, enabled by this type, can be a nicer\n * alternative to traditional exception throwing because it allows functions to\n * declare all _known_ errors with static types and then check for them\n * exhaustively in application code. Thrown exception have a type of `unknown`\n * and break out of regular control flow of programs making them harder to\n * inspect and more verbose work with due to try-catch blocks.\n */\nexport type Result<T, E = unknown> =\n  | { ok: true; value: T; error?: never }\n  | { ok: false; value?: never; error: E };\n\nexport function OK<V>(value: V): Result<V, never> {\n  return { ok: true, value };\n}\n\nexport function ERR<E>(error: E): Result<never, E> {\n  return { ok: false, error };\n}\n\n/**\n * unwrap is a convenience function for extracting a value from a result or\n * throwing if there was an error.\n */\nexport function unwrap<T>(r: Result<T, unknown>): T {\n  if (!r.ok) {\n    throw r.error;\n  }\n  return r.value;\n}\n\n/**\n * unwrapAsync is a convenience function for resolving a value from a Promise\n * of a result or rejecting if an error occurred.\n */\nexport async function unwrapAsync<T>(\n  pr: Promise<Result<T, unknown>>,\n): Promise<T> {\n  const r = await pr;\n  if (!r.ok) {\n    throw r.error;\n  }\n\n  return r.value;\n}\n"],"mappings":";;AAAA;;;;;;AAiBAA,OAAA,CAAAC,EAAA,GAAAA,EAAA;AAIAD,OAAA,CAAAE,GAAA,GAAAA,GAAA;AAQAF,OAAA,CAAAG,MAAA,GAAAA,MAAA;AAWAH,OAAA,CAAAI,WAAA,GAAAA,WAAA;AAvBA,SAAgBH,EAAEA,CAAII,KAAQ;EAC5B,OAAO;IAAEC,EAAE,EAAE,IAAI;IAAED;EAAK,CAAE;AAC5B;AAEA,SAAgBH,GAAGA,CAAIK,KAAQ;EAC7B,OAAO;IAAED,EAAE,EAAE,KAAK;IAAEC;EAAK,CAAE;AAC7B;AAEA;;;;AAIA,SAAgBJ,MAAMA,CAAIK,CAAqB;EAC7C,IAAI,CAACA,CAAC,CAACF,EAAE,EAAE;IACT,MAAME,CAAC,CAACD,KAAK;EACf;EACA,OAAOC,CAAC,CAACH,KAAK;AAChB;AAEA;;;;AAIO,eAAeD,WAAWA,CAC/BK,EAA+B;EAE/B,MAAMD,CAAC,GAAG,MAAMC,EAAE;EAClB,IAAI,CAACD,CAAC,CAACF,EAAE,EAAE;IACT,MAAME,CAAC,CAACD,KAAK;EACf;EAEA,OAAOC,CAAC,CAACH,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}