{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ModelList$ = exports.ModelList$outboundSchema = exports.ModelList$inboundSchema = exports.Data$ = exports.Data$outboundSchema = exports.Data$inboundSchema = void 0;\nconst z = __importStar(require(\"zod\"));\nconst basemodelcard_js_1 = require(\"./basemodelcard.js\");\nconst ftmodelcard_js_1 = require(\"./ftmodelcard.js\");\n/** @internal */\nexports.Data$inboundSchema = z.union([basemodelcard_js_1.BaseModelCard$inboundSchema.and(z.object({\n  type: z.literal(\"base\")\n}).transform(v => ({\n  type: v.type\n}))), ftmodelcard_js_1.FTModelCard$inboundSchema.and(z.object({\n  type: z.literal(\"fine-tuned\")\n}).transform(v => ({\n  type: v.type\n})))]);\n/** @internal */\nexports.Data$outboundSchema = z.union([basemodelcard_js_1.BaseModelCard$outboundSchema.and(z.object({\n  type: z.literal(\"base\")\n}).transform(v => ({\n  type: v.type\n}))), ftmodelcard_js_1.FTModelCard$outboundSchema.and(z.object({\n  type: z.literal(\"fine-tuned\")\n}).transform(v => ({\n  type: v.type\n})))]);\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar Data$;\n(function (Data$) {\n  /** @deprecated use `Data$inboundSchema` instead. */\n  Data$.inboundSchema = exports.Data$inboundSchema;\n  /** @deprecated use `Data$outboundSchema` instead. */\n  Data$.outboundSchema = exports.Data$outboundSchema;\n})(Data$ || (exports.Data$ = Data$ = {}));\n/** @internal */\nexports.ModelList$inboundSchema = z.object({\n  object: z.string().default(\"list\"),\n  data: z.array(z.union([basemodelcard_js_1.BaseModelCard$inboundSchema.and(z.object({\n    type: z.literal(\"base\")\n  }).transform(v => ({\n    type: v.type\n  }))), ftmodelcard_js_1.FTModelCard$inboundSchema.and(z.object({\n    type: z.literal(\"fine-tuned\")\n  }).transform(v => ({\n    type: v.type\n  })))])).optional()\n});\n/** @internal */\nexports.ModelList$outboundSchema = z.object({\n  object: z.string().default(\"list\"),\n  data: z.array(z.union([basemodelcard_js_1.BaseModelCard$outboundSchema.and(z.object({\n    type: z.literal(\"base\")\n  }).transform(v => ({\n    type: v.type\n  }))), ftmodelcard_js_1.FTModelCard$outboundSchema.and(z.object({\n    type: z.literal(\"fine-tuned\")\n  }).transform(v => ({\n    type: v.type\n  })))])).optional()\n});\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar ModelList$;\n(function (ModelList$) {\n  /** @deprecated use `ModelList$inboundSchema` instead. */\n  ModelList$.inboundSchema = exports.ModelList$inboundSchema;\n  /** @deprecated use `ModelList$outboundSchema` instead. */\n  ModelList$.outboundSchema = exports.ModelList$outboundSchema;\n})(ModelList$ || (exports.ModelList$ = ModelList$ = {}));","map":{"version":3,"names":["z","__importStar","require","basemodelcard_js_1","ftmodelcard_js_1","exports","Data$inboundSchema","union","BaseModelCard$inboundSchema","and","object","type","literal","transform","v","FTModelCard$inboundSchema","Data$outboundSchema","BaseModelCard$outboundSchema","FTModelCard$outboundSchema","Data$","inboundSchema","outboundSchema","ModelList$inboundSchema","string","default","data","array","optional","ModelList$outboundSchema","ModelList$"],"sources":["C:\\Users\\silvi\\OneDrive\\Escritorio\\LUISDEEEE\\School of code\\week 13\\final-project-the-visualisers\\node_modules\\@mistralai\\mistralai\\src\\models\\components\\modellist.ts"],"sourcesContent":["/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\r\n\r\nimport * as z from \"zod\";\r\nimport {\r\n  BaseModelCard,\r\n  BaseModelCard$inboundSchema,\r\n  BaseModelCard$Outbound,\r\n  BaseModelCard$outboundSchema,\r\n} from \"./basemodelcard.js\";\r\nimport {\r\n  FTModelCard,\r\n  FTModelCard$inboundSchema,\r\n  FTModelCard$Outbound,\r\n  FTModelCard$outboundSchema,\r\n} from \"./ftmodelcard.js\";\r\n\r\nexport type Data =\r\n  | (BaseModelCard & { type: \"base\" })\r\n  | (FTModelCard & { type: \"fine-tuned\" });\r\n\r\nexport type ModelList = {\r\n  object?: string | undefined;\r\n  data?:\r\n    | Array<\r\n      | (BaseModelCard & { type: \"base\" })\r\n      | (FTModelCard & { type: \"fine-tuned\" })\r\n    >\r\n    | undefined;\r\n};\r\n\r\n/** @internal */\r\nexport const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z\r\n  .union([\r\n    BaseModelCard$inboundSchema.and(\r\n      z.object({ type: z.literal(\"base\") }).transform((v) => ({\r\n        type: v.type,\r\n      })),\r\n    ),\r\n    FTModelCard$inboundSchema.and(\r\n      z.object({ type: z.literal(\"fine-tuned\") }).transform((v) => ({\r\n        type: v.type,\r\n      })),\r\n    ),\r\n  ]);\r\n\r\n/** @internal */\r\nexport type Data$Outbound =\r\n  | (BaseModelCard$Outbound & { type: \"base\" })\r\n  | (FTModelCard$Outbound & { type: \"fine-tuned\" });\r\n\r\n/** @internal */\r\nexport const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =\r\n  z.union([\r\n    BaseModelCard$outboundSchema.and(\r\n      z.object({ type: z.literal(\"base\") }).transform((v) => ({\r\n        type: v.type,\r\n      })),\r\n    ),\r\n    FTModelCard$outboundSchema.and(\r\n      z.object({ type: z.literal(\"fine-tuned\") }).transform((v) => ({\r\n        type: v.type,\r\n      })),\r\n    ),\r\n  ]);\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace Data$ {\r\n  /** @deprecated use `Data$inboundSchema` instead. */\r\n  export const inboundSchema = Data$inboundSchema;\r\n  /** @deprecated use `Data$outboundSchema` instead. */\r\n  export const outboundSchema = Data$outboundSchema;\r\n  /** @deprecated use `Data$Outbound` instead. */\r\n  export type Outbound = Data$Outbound;\r\n}\r\n\r\n/** @internal */\r\nexport const ModelList$inboundSchema: z.ZodType<\r\n  ModelList,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.object({\r\n  object: z.string().default(\"list\"),\r\n  data: z.array(\r\n    z.union([\r\n      BaseModelCard$inboundSchema.and(\r\n        z.object({ type: z.literal(\"base\") }).transform((v) => ({\r\n          type: v.type,\r\n        })),\r\n      ),\r\n      FTModelCard$inboundSchema.and(\r\n        z.object({ type: z.literal(\"fine-tuned\") }).transform((v) => ({\r\n          type: v.type,\r\n        })),\r\n      ),\r\n    ]),\r\n  ).optional(),\r\n});\r\n\r\n/** @internal */\r\nexport type ModelList$Outbound = {\r\n  object: string;\r\n  data?:\r\n    | Array<\r\n      | (BaseModelCard$Outbound & { type: \"base\" })\r\n      | (FTModelCard$Outbound & { type: \"fine-tuned\" })\r\n    >\r\n    | undefined;\r\n};\r\n\r\n/** @internal */\r\nexport const ModelList$outboundSchema: z.ZodType<\r\n  ModelList$Outbound,\r\n  z.ZodTypeDef,\r\n  ModelList\r\n> = z.object({\r\n  object: z.string().default(\"list\"),\r\n  data: z.array(\r\n    z.union([\r\n      BaseModelCard$outboundSchema.and(\r\n        z.object({ type: z.literal(\"base\") }).transform((v) => ({\r\n          type: v.type,\r\n        })),\r\n      ),\r\n      FTModelCard$outboundSchema.and(\r\n        z.object({ type: z.literal(\"fine-tuned\") }).transform((v) => ({\r\n          type: v.type,\r\n        })),\r\n      ),\r\n    ]),\r\n  ).optional(),\r\n});\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace ModelList$ {\r\n  /** @deprecated use `ModelList$inboundSchema` instead. */\r\n  export const inboundSchema = ModelList$inboundSchema;\r\n  /** @deprecated use `ModelList$outboundSchema` instead. */\r\n  export const outboundSchema = ModelList$outboundSchema;\r\n  /** @deprecated use `ModelList$Outbound` instead. */\r\n  export type Outbound = ModelList$Outbound;\r\n}\r\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAAA,CAAA,GAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,kBAAA,GAAAD,OAAA;AAMA,MAAAE,gBAAA,GAAAF,OAAA;AAqBA;AACaG,OAAA,CAAAC,kBAAkB,GAA2CN,CAAC,CACxEO,KAAK,CAAC,CACLJ,kBAAA,CAAAK,2BAA2B,CAACC,GAAG,CAC7BT,CAAC,CAACU,MAAM,CAAC;EAAEC,IAAI,EAAEX,CAAC,CAACY,OAAO,CAAC,MAAM;AAAC,CAAE,CAAC,CAACC,SAAS,CAAEC,CAAC,KAAM;EACtDH,IAAI,EAAEG,CAAC,CAACH;CACT,CAAC,CAAC,CACJ,EACDP,gBAAA,CAAAW,yBAAyB,CAACN,GAAG,CAC3BT,CAAC,CAACU,MAAM,CAAC;EAAEC,IAAI,EAAEX,CAAC,CAACY,OAAO,CAAC,YAAY;AAAC,CAAE,CAAC,CAACC,SAAS,CAAEC,CAAC,KAAM;EAC5DH,IAAI,EAAEG,CAAC,CAACH;CACT,CAAC,CAAC,CACJ,CACF,CAAC;AAOJ;AACaN,OAAA,CAAAW,mBAAmB,GAC9BhB,CAAC,CAACO,KAAK,CAAC,CACNJ,kBAAA,CAAAc,4BAA4B,CAACR,GAAG,CAC9BT,CAAC,CAACU,MAAM,CAAC;EAAEC,IAAI,EAAEX,CAAC,CAACY,OAAO,CAAC,MAAM;AAAC,CAAE,CAAC,CAACC,SAAS,CAAEC,CAAC,KAAM;EACtDH,IAAI,EAAEG,CAAC,CAACH;CACT,CAAC,CAAC,CACJ,EACDP,gBAAA,CAAAc,0BAA0B,CAACT,GAAG,CAC5BT,CAAC,CAACU,MAAM,CAAC;EAAEC,IAAI,EAAEX,CAAC,CAACY,OAAO,CAAC,YAAY;AAAC,CAAE,CAAC,CAACC,SAAS,CAAEC,CAAC,KAAM;EAC5DH,IAAI,EAAEG,CAAC,CAACH;CACT,CAAC,CAAC,CACJ,CACF,CAAC;AAEJ;;;;AAIA,IAAiBQ,KAAK;AAAtB,WAAiBA,KAAK;EACpB;EACaA,KAAA,CAAAC,aAAa,GAAGf,OAAA,CAAAC,kBAAkB;EAC/C;EACaa,KAAA,CAAAE,cAAc,GAAGhB,OAAA,CAAAW,mBAAmB;AAGnD,CAAC,EAPgBG,KAAK,KAAAd,OAAA,CAAAc,KAAA,GAALA,KAAK;AAStB;AACad,OAAA,CAAAiB,uBAAuB,GAIhCtB,CAAC,CAACU,MAAM,CAAC;EACXA,MAAM,EAAEV,CAAC,CAACuB,MAAM,EAAE,CAACC,OAAO,CAAC,MAAM,CAAC;EAClCC,IAAI,EAAEzB,CAAC,CAAC0B,KAAK,CACX1B,CAAC,CAACO,KAAK,CAAC,CACNJ,kBAAA,CAAAK,2BAA2B,CAACC,GAAG,CAC7BT,CAAC,CAACU,MAAM,CAAC;IAAEC,IAAI,EAAEX,CAAC,CAACY,OAAO,CAAC,MAAM;EAAC,CAAE,CAAC,CAACC,SAAS,CAAEC,CAAC,KAAM;IACtDH,IAAI,EAAEG,CAAC,CAACH;GACT,CAAC,CAAC,CACJ,EACDP,gBAAA,CAAAW,yBAAyB,CAACN,GAAG,CAC3BT,CAAC,CAACU,MAAM,CAAC;IAAEC,IAAI,EAAEX,CAAC,CAACY,OAAO,CAAC,YAAY;EAAC,CAAE,CAAC,CAACC,SAAS,CAAEC,CAAC,KAAM;IAC5DH,IAAI,EAAEG,CAAC,CAACH;GACT,CAAC,CAAC,CACJ,CACF,CAAC,CACH,CAACgB,QAAQ;CACX,CAAC;AAaF;AACatB,OAAA,CAAAuB,wBAAwB,GAIjC5B,CAAC,CAACU,MAAM,CAAC;EACXA,MAAM,EAAEV,CAAC,CAACuB,MAAM,EAAE,CAACC,OAAO,CAAC,MAAM,CAAC;EAClCC,IAAI,EAAEzB,CAAC,CAAC0B,KAAK,CACX1B,CAAC,CAACO,KAAK,CAAC,CACNJ,kBAAA,CAAAc,4BAA4B,CAACR,GAAG,CAC9BT,CAAC,CAACU,MAAM,CAAC;IAAEC,IAAI,EAAEX,CAAC,CAACY,OAAO,CAAC,MAAM;EAAC,CAAE,CAAC,CAACC,SAAS,CAAEC,CAAC,KAAM;IACtDH,IAAI,EAAEG,CAAC,CAACH;GACT,CAAC,CAAC,CACJ,EACDP,gBAAA,CAAAc,0BAA0B,CAACT,GAAG,CAC5BT,CAAC,CAACU,MAAM,CAAC;IAAEC,IAAI,EAAEX,CAAC,CAACY,OAAO,CAAC,YAAY;EAAC,CAAE,CAAC,CAACC,SAAS,CAAEC,CAAC,KAAM;IAC5DH,IAAI,EAAEG,CAAC,CAACH;GACT,CAAC,CAAC,CACJ,CACF,CAAC,CACH,CAACgB,QAAQ;CACX,CAAC;AAEF;;;;AAIA,IAAiBE,UAAU;AAA3B,WAAiBA,UAAU;EACzB;EACaA,UAAA,CAAAT,aAAa,GAAGf,OAAA,CAAAiB,uBAAuB;EACpD;EACaO,UAAA,CAAAR,cAAc,GAAGhB,OAAA,CAAAuB,wBAAwB;AAGxD,CAAC,EAPgBC,UAAU,KAAAxB,OAAA,CAAAwB,UAAA,GAAVA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}