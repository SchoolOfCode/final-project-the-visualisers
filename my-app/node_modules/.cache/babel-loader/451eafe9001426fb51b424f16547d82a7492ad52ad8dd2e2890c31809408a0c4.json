{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AgentsCompletionRequest$ = exports.AgentsCompletionRequest$outboundSchema = exports.AgentsCompletionRequest$inboundSchema = exports.AgentsCompletionRequestToolChoice$ = exports.AgentsCompletionRequestToolChoice$outboundSchema = exports.AgentsCompletionRequestToolChoice$inboundSchema = exports.AgentsCompletionRequestMessages$ = exports.AgentsCompletionRequestMessages$outboundSchema = exports.AgentsCompletionRequestMessages$inboundSchema = exports.AgentsCompletionRequestStop$ = exports.AgentsCompletionRequestStop$outboundSchema = exports.AgentsCompletionRequestStop$inboundSchema = void 0;\nconst z = __importStar(require(\"zod\"));\nconst primitives_js_1 = require(\"../../lib/primitives.js\");\nconst assistantmessage_js_1 = require(\"./assistantmessage.js\");\nconst responseformat_js_1 = require(\"./responseformat.js\");\nconst tool_js_1 = require(\"./tool.js\");\nconst toolchoice_js_1 = require(\"./toolchoice.js\");\nconst toolchoiceenum_js_1 = require(\"./toolchoiceenum.js\");\nconst toolmessage_js_1 = require(\"./toolmessage.js\");\nconst usermessage_js_1 = require(\"./usermessage.js\");\n/** @internal */\nexports.AgentsCompletionRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);\n/** @internal */\nexports.AgentsCompletionRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar AgentsCompletionRequestStop$;\n(function (AgentsCompletionRequestStop$) {\n  /** @deprecated use `AgentsCompletionRequestStop$inboundSchema` instead. */\n  AgentsCompletionRequestStop$.inboundSchema = exports.AgentsCompletionRequestStop$inboundSchema;\n  /** @deprecated use `AgentsCompletionRequestStop$outboundSchema` instead. */\n  AgentsCompletionRequestStop$.outboundSchema = exports.AgentsCompletionRequestStop$outboundSchema;\n})(AgentsCompletionRequestStop$ || (exports.AgentsCompletionRequestStop$ = AgentsCompletionRequestStop$ = {}));\n/** @internal */\nexports.AgentsCompletionRequestMessages$inboundSchema = z.union([usermessage_js_1.UserMessage$inboundSchema.and(z.object({\n  role: z.literal(\"user\")\n}).transform(v => ({\n  role: v.role\n}))), assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({\n  role: z.literal(\"assistant\")\n}).transform(v => ({\n  role: v.role\n}))), toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({\n  role: z.literal(\"tool\")\n}).transform(v => ({\n  role: v.role\n})))]);\n/** @internal */\nexports.AgentsCompletionRequestMessages$outboundSchema = z.union([usermessage_js_1.UserMessage$outboundSchema.and(z.object({\n  role: z.literal(\"user\")\n}).transform(v => ({\n  role: v.role\n}))), assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({\n  role: z.literal(\"assistant\")\n}).transform(v => ({\n  role: v.role\n}))), toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({\n  role: z.literal(\"tool\")\n}).transform(v => ({\n  role: v.role\n})))]);\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar AgentsCompletionRequestMessages$;\n(function (AgentsCompletionRequestMessages$) {\n  /** @deprecated use `AgentsCompletionRequestMessages$inboundSchema` instead. */\n  AgentsCompletionRequestMessages$.inboundSchema = exports.AgentsCompletionRequestMessages$inboundSchema;\n  /** @deprecated use `AgentsCompletionRequestMessages$outboundSchema` instead. */\n  AgentsCompletionRequestMessages$.outboundSchema = exports.AgentsCompletionRequestMessages$outboundSchema;\n})(AgentsCompletionRequestMessages$ || (exports.AgentsCompletionRequestMessages$ = AgentsCompletionRequestMessages$ = {}));\n/** @internal */\nexports.AgentsCompletionRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);\n/** @internal */\nexports.AgentsCompletionRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar AgentsCompletionRequestToolChoice$;\n(function (AgentsCompletionRequestToolChoice$) {\n  /** @deprecated use `AgentsCompletionRequestToolChoice$inboundSchema` instead. */\n  AgentsCompletionRequestToolChoice$.inboundSchema = exports.AgentsCompletionRequestToolChoice$inboundSchema;\n  /** @deprecated use `AgentsCompletionRequestToolChoice$outboundSchema` instead. */\n  AgentsCompletionRequestToolChoice$.outboundSchema = exports.AgentsCompletionRequestToolChoice$outboundSchema;\n})(AgentsCompletionRequestToolChoice$ || (exports.AgentsCompletionRequestToolChoice$ = AgentsCompletionRequestToolChoice$ = {}));\n/** @internal */\nexports.AgentsCompletionRequest$inboundSchema = z.object({\n  max_tokens: z.nullable(z.number().int()).optional(),\n  min_tokens: z.nullable(z.number().int()).optional(),\n  stream: z.boolean().default(false),\n  stop: z.union([z.string(), z.array(z.string())]).optional(),\n  random_seed: z.nullable(z.number().int()).optional(),\n  messages: z.array(z.union([usermessage_js_1.UserMessage$inboundSchema.and(z.object({\n    role: z.literal(\"user\")\n  }).transform(v => ({\n    role: v.role\n  }))), assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({\n    role: z.literal(\"assistant\")\n  }).transform(v => ({\n    role: v.role\n  }))), toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({\n    role: z.literal(\"tool\")\n  }).transform(v => ({\n    role: v.role\n  })))])),\n  response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),\n  tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),\n  tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),\n  agent_id: z.string()\n}).transform(v => {\n  return (0, primitives_js_1.remap)(v, {\n    \"max_tokens\": \"maxTokens\",\n    \"min_tokens\": \"minTokens\",\n    \"random_seed\": \"randomSeed\",\n    \"response_format\": \"responseFormat\",\n    \"tool_choice\": \"toolChoice\",\n    \"agent_id\": \"agentId\"\n  });\n});\n/** @internal */\nexports.AgentsCompletionRequest$outboundSchema = z.object({\n  maxTokens: z.nullable(z.number().int()).optional(),\n  minTokens: z.nullable(z.number().int()).optional(),\n  stream: z.boolean().default(false),\n  stop: z.union([z.string(), z.array(z.string())]).optional(),\n  randomSeed: z.nullable(z.number().int()).optional(),\n  messages: z.array(z.union([usermessage_js_1.UserMessage$outboundSchema.and(z.object({\n    role: z.literal(\"user\")\n  }).transform(v => ({\n    role: v.role\n  }))), assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({\n    role: z.literal(\"assistant\")\n  }).transform(v => ({\n    role: v.role\n  }))), toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({\n    role: z.literal(\"tool\")\n  }).transform(v => ({\n    role: v.role\n  })))])),\n  responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),\n  tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),\n  toolChoice: z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]).optional(),\n  agentId: z.string()\n}).transform(v => {\n  return (0, primitives_js_1.remap)(v, {\n    maxTokens: \"max_tokens\",\n    minTokens: \"min_tokens\",\n    randomSeed: \"random_seed\",\n    responseFormat: \"response_format\",\n    toolChoice: \"tool_choice\",\n    agentId: \"agent_id\"\n  });\n});\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar AgentsCompletionRequest$;\n(function (AgentsCompletionRequest$) {\n  /** @deprecated use `AgentsCompletionRequest$inboundSchema` instead. */\n  AgentsCompletionRequest$.inboundSchema = exports.AgentsCompletionRequest$inboundSchema;\n  /** @deprecated use `AgentsCompletionRequest$outboundSchema` instead. */\n  AgentsCompletionRequest$.outboundSchema = exports.AgentsCompletionRequest$outboundSchema;\n})(AgentsCompletionRequest$ || (exports.AgentsCompletionRequest$ = AgentsCompletionRequest$ = {}));","map":{"version":3,"names":["z","__importStar","require","primitives_js_1","assistantmessage_js_1","responseformat_js_1","tool_js_1","toolchoice_js_1","toolchoiceenum_js_1","toolmessage_js_1","usermessage_js_1","exports","AgentsCompletionRequestStop$inboundSchema","union","string","array","AgentsCompletionRequestStop$outboundSchema","AgentsCompletionRequestStop$","inboundSchema","outboundSchema","AgentsCompletionRequestMessages$inboundSchema","UserMessage$inboundSchema","and","object","role","literal","transform","v","AssistantMessage$inboundSchema","ToolMessage$inboundSchema","AgentsCompletionRequestMessages$outboundSchema","UserMessage$outboundSchema","AssistantMessage$outboundSchema","ToolMessage$outboundSchema","AgentsCompletionRequestMessages$","AgentsCompletionRequestToolChoice$inboundSchema","ToolChoice$inboundSchema","ToolChoiceEnum$inboundSchema","AgentsCompletionRequestToolChoice$outboundSchema","ToolChoice$outboundSchema","ToolChoiceEnum$outboundSchema","AgentsCompletionRequestToolChoice$","AgentsCompletionRequest$inboundSchema","max_tokens","nullable","number","int","optional","min_tokens","stream","boolean","default","stop","random_seed","messages","response_format","ResponseFormat$inboundSchema","tools","Tool$inboundSchema","tool_choice","agent_id","remap","AgentsCompletionRequest$outboundSchema","maxTokens","minTokens","randomSeed","responseFormat","ResponseFormat$outboundSchema","Tool$outboundSchema","toolChoice","agentId","AgentsCompletionRequest$"],"sources":["C:\\Users\\silvi\\OneDrive\\Escritorio\\LUISDEEEE\\School of code\\WEEK 12 FINAL HACKATON\\HistoriansRule\\node_modules\\@mistralai\\mistralai\\src\\models\\components\\agentscompletionrequest.ts"],"sourcesContent":["/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\r\n\r\nimport * as z from \"zod\";\r\nimport { remap as remap$ } from \"../../lib/primitives.js\";\r\nimport {\r\n  AssistantMessage,\r\n  AssistantMessage$inboundSchema,\r\n  AssistantMessage$Outbound,\r\n  AssistantMessage$outboundSchema,\r\n} from \"./assistantmessage.js\";\r\nimport {\r\n  ResponseFormat,\r\n  ResponseFormat$inboundSchema,\r\n  ResponseFormat$Outbound,\r\n  ResponseFormat$outboundSchema,\r\n} from \"./responseformat.js\";\r\nimport {\r\n  Tool,\r\n  Tool$inboundSchema,\r\n  Tool$Outbound,\r\n  Tool$outboundSchema,\r\n} from \"./tool.js\";\r\nimport {\r\n  ToolChoice,\r\n  ToolChoice$inboundSchema,\r\n  ToolChoice$Outbound,\r\n  ToolChoice$outboundSchema,\r\n} from \"./toolchoice.js\";\r\nimport {\r\n  ToolChoiceEnum,\r\n  ToolChoiceEnum$inboundSchema,\r\n  ToolChoiceEnum$outboundSchema,\r\n} from \"./toolchoiceenum.js\";\r\nimport {\r\n  ToolMessage,\r\n  ToolMessage$inboundSchema,\r\n  ToolMessage$Outbound,\r\n  ToolMessage$outboundSchema,\r\n} from \"./toolmessage.js\";\r\nimport {\r\n  UserMessage,\r\n  UserMessage$inboundSchema,\r\n  UserMessage$Outbound,\r\n  UserMessage$outboundSchema,\r\n} from \"./usermessage.js\";\r\n\r\n/**\r\n * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array\r\n */\r\nexport type AgentsCompletionRequestStop = string | Array<string>;\r\n\r\nexport type AgentsCompletionRequestMessages =\r\n  | (UserMessage & { role: \"user\" })\r\n  | (AssistantMessage & { role: \"assistant\" })\r\n  | (ToolMessage & { role: \"tool\" });\r\n\r\nexport type AgentsCompletionRequestToolChoice = ToolChoice | ToolChoiceEnum;\r\n\r\nexport type AgentsCompletionRequest = {\r\n  /**\r\n   * The maximum number of tokens to generate in the completion. The token count of your prompt plus `max_tokens` cannot exceed the model's context length.\r\n   */\r\n  maxTokens?: number | null | undefined;\r\n  /**\r\n   * The minimum number of tokens to generate in the completion.\r\n   */\r\n  minTokens?: number | null | undefined;\r\n  /**\r\n   * Whether to stream back partial progress. If set, tokens will be sent as data-only server-side events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.\r\n   */\r\n  stream?: boolean | undefined;\r\n  /**\r\n   * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array\r\n   */\r\n  stop?: string | Array<string> | undefined;\r\n  /**\r\n   * The seed to use for random sampling. If set, different calls will generate deterministic results.\r\n   */\r\n  randomSeed?: number | null | undefined;\r\n  /**\r\n   * The prompt(s) to generate completions for, encoded as a list of dict with role and content.\r\n   */\r\n  messages: Array<\r\n    | (UserMessage & { role: \"user\" })\r\n    | (AssistantMessage & { role: \"assistant\" })\r\n    | (ToolMessage & { role: \"tool\" })\r\n  >;\r\n  responseFormat?: ResponseFormat | undefined;\r\n  tools?: Array<Tool> | null | undefined;\r\n  toolChoice?: ToolChoice | ToolChoiceEnum | undefined;\r\n  /**\r\n   * The ID of the agent to use for this completion.\r\n   */\r\n  agentId: string;\r\n};\r\n\r\n/** @internal */\r\nexport const AgentsCompletionRequestStop$inboundSchema: z.ZodType<\r\n  AgentsCompletionRequestStop,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.union([z.string(), z.array(z.string())]);\r\n\r\n/** @internal */\r\nexport type AgentsCompletionRequestStop$Outbound = string | Array<string>;\r\n\r\n/** @internal */\r\nexport const AgentsCompletionRequestStop$outboundSchema: z.ZodType<\r\n  AgentsCompletionRequestStop$Outbound,\r\n  z.ZodTypeDef,\r\n  AgentsCompletionRequestStop\r\n> = z.union([z.string(), z.array(z.string())]);\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace AgentsCompletionRequestStop$ {\r\n  /** @deprecated use `AgentsCompletionRequestStop$inboundSchema` instead. */\r\n  export const inboundSchema = AgentsCompletionRequestStop$inboundSchema;\r\n  /** @deprecated use `AgentsCompletionRequestStop$outboundSchema` instead. */\r\n  export const outboundSchema = AgentsCompletionRequestStop$outboundSchema;\r\n  /** @deprecated use `AgentsCompletionRequestStop$Outbound` instead. */\r\n  export type Outbound = AgentsCompletionRequestStop$Outbound;\r\n}\r\n\r\n/** @internal */\r\nexport const AgentsCompletionRequestMessages$inboundSchema: z.ZodType<\r\n  AgentsCompletionRequestMessages,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.union([\r\n  UserMessage$inboundSchema.and(\r\n    z.object({ role: z.literal(\"user\") }).transform((v) => ({ role: v.role })),\r\n  ),\r\n  AssistantMessage$inboundSchema.and(\r\n    z.object({ role: z.literal(\"assistant\") }).transform((v) => ({\r\n      role: v.role,\r\n    })),\r\n  ),\r\n  ToolMessage$inboundSchema.and(\r\n    z.object({ role: z.literal(\"tool\") }).transform((v) => ({ role: v.role })),\r\n  ),\r\n]);\r\n\r\n/** @internal */\r\nexport type AgentsCompletionRequestMessages$Outbound =\r\n  | (UserMessage$Outbound & { role: \"user\" })\r\n  | (AssistantMessage$Outbound & { role: \"assistant\" })\r\n  | (ToolMessage$Outbound & { role: \"tool\" });\r\n\r\n/** @internal */\r\nexport const AgentsCompletionRequestMessages$outboundSchema: z.ZodType<\r\n  AgentsCompletionRequestMessages$Outbound,\r\n  z.ZodTypeDef,\r\n  AgentsCompletionRequestMessages\r\n> = z.union([\r\n  UserMessage$outboundSchema.and(\r\n    z.object({ role: z.literal(\"user\") }).transform((v) => ({ role: v.role })),\r\n  ),\r\n  AssistantMessage$outboundSchema.and(\r\n    z.object({ role: z.literal(\"assistant\") }).transform((v) => ({\r\n      role: v.role,\r\n    })),\r\n  ),\r\n  ToolMessage$outboundSchema.and(\r\n    z.object({ role: z.literal(\"tool\") }).transform((v) => ({ role: v.role })),\r\n  ),\r\n]);\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace AgentsCompletionRequestMessages$ {\r\n  /** @deprecated use `AgentsCompletionRequestMessages$inboundSchema` instead. */\r\n  export const inboundSchema = AgentsCompletionRequestMessages$inboundSchema;\r\n  /** @deprecated use `AgentsCompletionRequestMessages$outboundSchema` instead. */\r\n  export const outboundSchema = AgentsCompletionRequestMessages$outboundSchema;\r\n  /** @deprecated use `AgentsCompletionRequestMessages$Outbound` instead. */\r\n  export type Outbound = AgentsCompletionRequestMessages$Outbound;\r\n}\r\n\r\n/** @internal */\r\nexport const AgentsCompletionRequestToolChoice$inboundSchema: z.ZodType<\r\n  AgentsCompletionRequestToolChoice,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.union([ToolChoice$inboundSchema, ToolChoiceEnum$inboundSchema]);\r\n\r\n/** @internal */\r\nexport type AgentsCompletionRequestToolChoice$Outbound =\r\n  | ToolChoice$Outbound\r\n  | string;\r\n\r\n/** @internal */\r\nexport const AgentsCompletionRequestToolChoice$outboundSchema: z.ZodType<\r\n  AgentsCompletionRequestToolChoice$Outbound,\r\n  z.ZodTypeDef,\r\n  AgentsCompletionRequestToolChoice\r\n> = z.union([ToolChoice$outboundSchema, ToolChoiceEnum$outboundSchema]);\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace AgentsCompletionRequestToolChoice$ {\r\n  /** @deprecated use `AgentsCompletionRequestToolChoice$inboundSchema` instead. */\r\n  export const inboundSchema = AgentsCompletionRequestToolChoice$inboundSchema;\r\n  /** @deprecated use `AgentsCompletionRequestToolChoice$outboundSchema` instead. */\r\n  export const outboundSchema =\r\n    AgentsCompletionRequestToolChoice$outboundSchema;\r\n  /** @deprecated use `AgentsCompletionRequestToolChoice$Outbound` instead. */\r\n  export type Outbound = AgentsCompletionRequestToolChoice$Outbound;\r\n}\r\n\r\n/** @internal */\r\nexport const AgentsCompletionRequest$inboundSchema: z.ZodType<\r\n  AgentsCompletionRequest,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.object({\r\n  max_tokens: z.nullable(z.number().int()).optional(),\r\n  min_tokens: z.nullable(z.number().int()).optional(),\r\n  stream: z.boolean().default(false),\r\n  stop: z.union([z.string(), z.array(z.string())]).optional(),\r\n  random_seed: z.nullable(z.number().int()).optional(),\r\n  messages: z.array(\r\n    z.union([\r\n      UserMessage$inboundSchema.and(\r\n        z.object({ role: z.literal(\"user\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      AssistantMessage$inboundSchema.and(\r\n        z.object({ role: z.literal(\"assistant\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      ToolMessage$inboundSchema.and(\r\n        z.object({ role: z.literal(\"tool\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n    ]),\r\n  ),\r\n  response_format: ResponseFormat$inboundSchema.optional(),\r\n  tools: z.nullable(z.array(Tool$inboundSchema)).optional(),\r\n  tool_choice: z.union([ToolChoice$inboundSchema, ToolChoiceEnum$inboundSchema])\r\n    .optional(),\r\n  agent_id: z.string(),\r\n}).transform((v) => {\r\n  return remap$(v, {\r\n    \"max_tokens\": \"maxTokens\",\r\n    \"min_tokens\": \"minTokens\",\r\n    \"random_seed\": \"randomSeed\",\r\n    \"response_format\": \"responseFormat\",\r\n    \"tool_choice\": \"toolChoice\",\r\n    \"agent_id\": \"agentId\",\r\n  });\r\n});\r\n\r\n/** @internal */\r\nexport type AgentsCompletionRequest$Outbound = {\r\n  max_tokens?: number | null | undefined;\r\n  min_tokens?: number | null | undefined;\r\n  stream: boolean;\r\n  stop?: string | Array<string> | undefined;\r\n  random_seed?: number | null | undefined;\r\n  messages: Array<\r\n    | (UserMessage$Outbound & { role: \"user\" })\r\n    | (AssistantMessage$Outbound & { role: \"assistant\" })\r\n    | (ToolMessage$Outbound & { role: \"tool\" })\r\n  >;\r\n  response_format?: ResponseFormat$Outbound | undefined;\r\n  tools?: Array<Tool$Outbound> | null | undefined;\r\n  tool_choice?: ToolChoice$Outbound | string | undefined;\r\n  agent_id: string;\r\n};\r\n\r\n/** @internal */\r\nexport const AgentsCompletionRequest$outboundSchema: z.ZodType<\r\n  AgentsCompletionRequest$Outbound,\r\n  z.ZodTypeDef,\r\n  AgentsCompletionRequest\r\n> = z.object({\r\n  maxTokens: z.nullable(z.number().int()).optional(),\r\n  minTokens: z.nullable(z.number().int()).optional(),\r\n  stream: z.boolean().default(false),\r\n  stop: z.union([z.string(), z.array(z.string())]).optional(),\r\n  randomSeed: z.nullable(z.number().int()).optional(),\r\n  messages: z.array(\r\n    z.union([\r\n      UserMessage$outboundSchema.and(\r\n        z.object({ role: z.literal(\"user\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      AssistantMessage$outboundSchema.and(\r\n        z.object({ role: z.literal(\"assistant\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      ToolMessage$outboundSchema.and(\r\n        z.object({ role: z.literal(\"tool\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n    ]),\r\n  ),\r\n  responseFormat: ResponseFormat$outboundSchema.optional(),\r\n  tools: z.nullable(z.array(Tool$outboundSchema)).optional(),\r\n  toolChoice: z.union([\r\n    ToolChoice$outboundSchema,\r\n    ToolChoiceEnum$outboundSchema,\r\n  ]).optional(),\r\n  agentId: z.string(),\r\n}).transform((v) => {\r\n  return remap$(v, {\r\n    maxTokens: \"max_tokens\",\r\n    minTokens: \"min_tokens\",\r\n    randomSeed: \"random_seed\",\r\n    responseFormat: \"response_format\",\r\n    toolChoice: \"tool_choice\",\r\n    agentId: \"agent_id\",\r\n  });\r\n});\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace AgentsCompletionRequest$ {\r\n  /** @deprecated use `AgentsCompletionRequest$inboundSchema` instead. */\r\n  export const inboundSchema = AgentsCompletionRequest$inboundSchema;\r\n  /** @deprecated use `AgentsCompletionRequest$outboundSchema` instead. */\r\n  export const outboundSchema = AgentsCompletionRequest$outboundSchema;\r\n  /** @deprecated use `AgentsCompletionRequest$Outbound` instead. */\r\n  export type Outbound = AgentsCompletionRequest$Outbound;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}