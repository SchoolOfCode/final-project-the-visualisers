{"ast":null,"code":"\"use strict\";\n\n/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Agents = void 0;\nconst agentsComplete_js_1 = require(\"../funcs/agentsComplete.js\");\nconst agentsStream_js_1 = require(\"../funcs/agentsStream.js\");\nconst sdks_js_1 = require(\"../lib/sdks.js\");\nconst fp_js_1 = require(\"../types/fp.js\");\nclass Agents extends sdks_js_1.ClientSDK {\n  /**\n   * Agents Completion\n   */\n  async complete(request, options) {\n    return (0, fp_js_1.unwrapAsync)((0, agentsComplete_js_1.agentsComplete)(this, request, options));\n  }\n  /**\n   * Stream Agents completion\n   *\n   * @remarks\n   * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.\n   */\n  async stream(request, options) {\n    return (0, fp_js_1.unwrapAsync)((0, agentsStream_js_1.agentsStream)(this, request, options));\n  }\n}\nexports.Agents = Agents;","map":{"version":3,"names":["agentsComplete_js_1","require","agentsStream_js_1","sdks_js_1","fp_js_1","Agents","ClientSDK","complete","request","options","unwrapAsync","agentsComplete","stream","agentsStream","exports"],"sources":["/Users/emilijablinkeviciute/Desktop/REPOS/Visualisers project/final-project-the-visualisers/my-app/node_modules/@mistralai/mistralai/src/sdk/agents.ts"],"sourcesContent":["/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport { agentsComplete } from \"../funcs/agentsComplete.js\";\nimport { agentsStream } from \"../funcs/agentsStream.js\";\nimport { EventStream } from \"../lib/event-streams.js\";\nimport { ClientSDK, RequestOptions } from \"../lib/sdks.js\";\nimport * as components from \"../models/components/index.js\";\nimport { unwrapAsync } from \"../types/fp.js\";\n\nexport class Agents extends ClientSDK {\n  /**\n   * Agents Completion\n   */\n  async complete(\n    request: components.AgentsCompletionRequest,\n    options?: RequestOptions,\n  ): Promise<components.ChatCompletionResponse> {\n    return unwrapAsync(agentsComplete(\n      this,\n      request,\n      options,\n    ));\n  }\n\n  /**\n   * Stream Agents completion\n   *\n   * @remarks\n   * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.\n   */\n  async stream(\n    request: components.AgentsCompletionStreamRequest,\n    options?: RequestOptions,\n  ): Promise<EventStream<components.CompletionEvent>> {\n    return unwrapAsync(agentsStream(\n      this,\n      request,\n      options,\n    ));\n  }\n}\n"],"mappings":";;AAAA;;;;;;;AAIA,MAAAA,mBAAA,GAAAC,OAAA;AACA,MAAAC,iBAAA,GAAAD,OAAA;AAEA,MAAAE,SAAA,GAAAF,OAAA;AAEA,MAAAG,OAAA,GAAAH,OAAA;AAEA,MAAaI,MAAO,SAAQF,SAAA,CAAAG,SAAS;EACnC;;;EAGA,MAAMC,QAAQA,CACZC,OAA2C,EAC3CC,OAAwB;IAExB,OAAO,IAAAL,OAAA,CAAAM,WAAW,EAAC,IAAAV,mBAAA,CAAAW,cAAc,EAC/B,IAAI,EACJH,OAAO,EACPC,OAAO,CACR,CAAC;EACJ;EAEA;;;;;;EAMA,MAAMG,MAAMA,CACVJ,OAAiD,EACjDC,OAAwB;IAExB,OAAO,IAAAL,OAAA,CAAAM,WAAW,EAAC,IAAAR,iBAAA,CAAAW,YAAY,EAC7B,IAAI,EACJL,OAAO,EACPC,OAAO,CACR,CAAC;EACJ;;AA9BFK,OAAA,CAAAT,MAAA,GAAAA,MAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}