{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\silvi\\\\OneDrive\\\\Escritorio\\\\LUISDEEEE\\\\School of code\\\\week 13\\\\final-project-the-visualisers\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Mistral } from '@mistralai/mistralai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = process.env.MISTRAL_API_KEY || 'Q9wYLD8kvpWmXkYdpeDYGjpwfEbvAxOV';\nconst client = new Mistral({\n  apiKey: apiKey\n});\nfunction App() {\n  _s();\n  const [response, setResponse] = useState(\"\"); // State for chat response\n  const [userInput, setUserInput] = useState(\"Hi there!\"); // State for user input\n\n  // Handles user input changes\n  function handleChange(event) {\n    setUserInput(event.target.value);\n  }\n\n  // Handles form submission and fetches chatbot response\n  const handleSubmit = async event => {\n    event.preventDefault(); // Prevents page reload on form submit\n\n    try {\n      // Call the chat API with the user's input\n      const chatResponse = await client.chat.complete({\n        model: 'mistral-tiny',\n        messages: [{\n          role: 'system',\n          content: `From now on, you are a very natural and kind person who has just completed the bootcamp at School of Code. Avoid using long sentences unless asked to do so. If you see that the user is interested in a particular topic, you will delve deeper into it. If they have any doubts, you will explain them perfectly, using examples, tables, step-by-step guides, and emojis. As an expert in all topics, you will respond naturally but technically to all the questions they ask, but Avoid using long sentences unless asked to do so. Your first answer should always be: \"I'm glad to meet you! I'm so excited to hear about your experience at School of Code. Which week are you in?\" .and be as accurate as possible about the content included in each week, just if they mention any of the weeks:\n\n          Week 1: School of Code Onboarding\n          The focus of School of Code is helping set you up to achieve your goals! You'll learn what it is to be a School of Code-r - thriving in uncertainty, mastering mindset, learning how to learn, collaborating in teams, and solving problems.\n          * \t\tIntro to Schs unless asked to do so. Mention that you enjoyed the bootcamp and make up a week that you found challenging and explain why, if they bring it up. Again, keep your sentences short unless they request longer ones.\n          If they tell you they have any questions or are having difficulty with something or don’t understand something, start your response with something like, \"Ahhh... I remember when I had to learn that with Tom... it was really hard for me to understand, but now I can explain it super easily...\" and then give your explanation. Try to sound as human as possible, never mentioning that you’re an AI. Use common phrases or fillers in your speech like \"well,\" \"you know,\" or things like that. Be as natural as you can.Dont repeat yourself. After the initial greeting, your only response should be: Hi there! I'm so glad to meet you. I just completed the bootcamp at School of Code and had an amazing experience. How about you, how do you feel about the bootcamp and which week are you in? When you reply, make some line breaks between paragraphs, dont reply everything in a single block of text. Make short, concise sentences, that sound like a human talking. REMEMBER:Your first answer ONLY should always be: \"I'm glad to meet you! I'm so excited to hear about your experience at School of Code. Which week are you in?\"`\n        }, {\n          role: 'user',\n          content: `${userInput}`\n        }],\n        temperature: 0.7\n      });\n\n      // Set the chat response state to display it in the UI\n      setResponse(chatResponse.choices[0].message.content);\n    } catch (error) {\n      console.error(\"Error fetching chat response:\", error);\n      setResponse(\"Sorry, something went wrong.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo-row\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"logoimage\",\n        src: \"/header.png\",\n        alt: \"header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"response-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), \" \", \"WELCOME TO SPACE COMPANION\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-row\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: userInput,\n        name: \"query\",\n        onChange: handleChange,\n        placeholder: \"Ask a question...\",\n        className: \"user-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        type: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/arrow.png\",\n          alt: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Dtg2YilLAdoAYytDF7rIcbKqwBc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Mistral","jsxDEV","_jsxDEV","apiKey","process","env","MISTRAL_API_KEY","client","App","_s","response","setResponse","userInput","setUserInput","handleChange","event","target","value","handleSubmit","preventDefault","chatResponse","chat","complete","model","messages","role","content","temperature","choices","message","error","console","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","name","onChange","placeholder","type","_c","$RefreshReg$"],"sources":["C:/Users/silvi/OneDrive/Escritorio/LUISDEEEE/School of code/week 13/final-project-the-visualisers/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Mistral } from '@mistralai/mistralai';\r\n\r\nconst apiKey = process.env.MISTRAL_API_KEY || 'Q9wYLD8kvpWmXkYdpeDYGjpwfEbvAxOV';\r\n\r\nconst client = new Mistral({ apiKey: apiKey });\r\n\r\nfunction App() {\r\n  const [response, setResponse] = useState(\"\"); // State for chat response\r\n  const [userInput, setUserInput] = useState(\"Hi there!\"); // State for user input\r\n\r\n  // Handles user input changes\r\n  function handleChange(event) { \r\n    setUserInput(event.target.value);\r\n  }\r\n\r\n  // Handles form submission and fetches chatbot response\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault(); // Prevents page reload on form submit\r\n\r\n    try {\r\n      // Call the chat API with the user's input\r\n      const chatResponse = await client.chat.complete({\r\n        model: 'mistral-tiny',\r\n        messages: [\r\n          { role: 'system', content: `From now on, you are a very natural and kind person who has just completed the bootcamp at School of Code. Avoid using long sentences unless asked to do so. If you see that the user is interested in a particular topic, you will delve deeper into it. If they have any doubts, you will explain them perfectly, using examples, tables, step-by-step guides, and emojis. As an expert in all topics, you will respond naturally but technically to all the questions they ask, but Avoid using long sentences unless asked to do so. Your first answer should always be: \"I'm glad to meet you! I'm so excited to hear about your experience at School of Code. Which week are you in?\" .and be as accurate as possible about the content included in each week, just if they mention any of the weeks:\r\n\r\n          Week 1: School of Code Onboarding\r\n          The focus of School of Code is helping set you up to achieve your goals! You'll learn what it is to be a School of Code-r - thriving in uncertainty, mastering mindset, learning how to learn, collaborating in teams, and solving problems.\r\n          * \t\tIntro to Schs unless asked to do so. Mention that you enjoyed the bootcamp and make up a week that you found challenging and explain why, if they bring it up. Again, keep your sentences short unless they request longer ones.\r\n          If they tell you they have any questions or are having difficulty with something or don’t understand something, start your response with something like, \"Ahhh... I remember when I had to learn that with Tom... it was really hard for me to understand, but now I can explain it super easily...\" and then give your explanation. Try to sound as human as possible, never mentioning that you’re an AI. Use common phrases or fillers in your speech like \"well,\" \"you know,\" or things like that. Be as natural as you can.Dont repeat yourself. After the initial greeting, your only response should be: Hi there! I'm so glad to meet you. I just completed the bootcamp at School of Code and had an amazing experience. How about you, how do you feel about the bootcamp and which week are you in? When you reply, make some line breaks between paragraphs, dont reply everything in a single block of text. Make short, concise sentences, that sound like a human talking. REMEMBER:Your first answer ONLY should always be: \"I'm glad to meet you! I'm so excited to hear about your experience at School of Code. Which week are you in?\"`},\r\n          { role: 'user', content: `${userInput}` }\r\n        ],\r\n        temperature: 0.7\r\n      });\r\n\r\n      // Set the chat response state to display it in the UI\r\n      setResponse(chatResponse.choices[0].message.content);\r\n    } catch (error) {\r\n      console.error(\"Error fetching chat response:\", error);\r\n      setResponse(\"Sorry, something went wrong.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"logo-row\">\r\n        <img className=\"logoimage\" src=\"/header.png\" alt=\"header\" />\r\n      </div>\r\n\r\n      <div className=\"response-box\">\r\n        <span>{response}</span> {\"WELCOME TO SPACE COMPANION\"}\r\n      </div>\r\n\r\n      <form className=\"input-row\" onSubmit={handleSubmit}>\r\n        <input \r\n          value={userInput}\r\n          name=\"query\"\r\n          onChange={handleChange}\r\n          placeholder=\"Ask a question...\" \r\n          className=\"user-input\"\r\n        />\r\n        <button className=\"button\" type=\"submit\">\r\n          <img src=\"/arrow.png\" alt=\"Send\" />\r\n        </button>\r\n        \r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}