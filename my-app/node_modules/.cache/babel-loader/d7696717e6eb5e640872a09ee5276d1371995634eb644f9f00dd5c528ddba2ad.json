{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChatCompletionStreamRequest$ = exports.ChatCompletionStreamRequest$outboundSchema = exports.ChatCompletionStreamRequest$inboundSchema = exports.ChatCompletionStreamRequestToolChoice$ = exports.ChatCompletionStreamRequestToolChoice$outboundSchema = exports.ChatCompletionStreamRequestToolChoice$inboundSchema = exports.ChatCompletionStreamRequestMessages$ = exports.ChatCompletionStreamRequestMessages$outboundSchema = exports.ChatCompletionStreamRequestMessages$inboundSchema = exports.ChatCompletionStreamRequestStop$ = exports.ChatCompletionStreamRequestStop$outboundSchema = exports.ChatCompletionStreamRequestStop$inboundSchema = void 0;\nconst z = __importStar(require(\"zod\"));\nconst primitives_js_1 = require(\"../../lib/primitives.js\");\nconst assistantmessage_js_1 = require(\"./assistantmessage.js\");\nconst responseformat_js_1 = require(\"./responseformat.js\");\nconst systemmessage_js_1 = require(\"./systemmessage.js\");\nconst tool_js_1 = require(\"./tool.js\");\nconst toolchoice_js_1 = require(\"./toolchoice.js\");\nconst toolchoiceenum_js_1 = require(\"./toolchoiceenum.js\");\nconst toolmessage_js_1 = require(\"./toolmessage.js\");\nconst usermessage_js_1 = require(\"./usermessage.js\");\n/** @internal */\nexports.ChatCompletionStreamRequestStop$inboundSchema = z.union([z.string(), z.array(z.string())]);\n/** @internal */\nexports.ChatCompletionStreamRequestStop$outboundSchema = z.union([z.string(), z.array(z.string())]);\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar ChatCompletionStreamRequestStop$;\n(function (ChatCompletionStreamRequestStop$) {\n  /** @deprecated use `ChatCompletionStreamRequestStop$inboundSchema` instead. */\n  ChatCompletionStreamRequestStop$.inboundSchema = exports.ChatCompletionStreamRequestStop$inboundSchema;\n  /** @deprecated use `ChatCompletionStreamRequestStop$outboundSchema` instead. */\n  ChatCompletionStreamRequestStop$.outboundSchema = exports.ChatCompletionStreamRequestStop$outboundSchema;\n})(ChatCompletionStreamRequestStop$ || (exports.ChatCompletionStreamRequestStop$ = ChatCompletionStreamRequestStop$ = {}));\n/** @internal */\nexports.ChatCompletionStreamRequestMessages$inboundSchema = z.union([systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({\n  role: z.literal(\"system\")\n}).transform(v => ({\n  role: v.role\n}))), usermessage_js_1.UserMessage$inboundSchema.and(z.object({\n  role: z.literal(\"user\")\n}).transform(v => ({\n  role: v.role\n}))), assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({\n  role: z.literal(\"assistant\")\n}).transform(v => ({\n  role: v.role\n}))), toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({\n  role: z.literal(\"tool\")\n}).transform(v => ({\n  role: v.role\n})))]);\n/** @internal */\nexports.ChatCompletionStreamRequestMessages$outboundSchema = z.union([systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({\n  role: z.literal(\"system\")\n}).transform(v => ({\n  role: v.role\n}))), usermessage_js_1.UserMessage$outboundSchema.and(z.object({\n  role: z.literal(\"user\")\n}).transform(v => ({\n  role: v.role\n}))), assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({\n  role: z.literal(\"assistant\")\n}).transform(v => ({\n  role: v.role\n}))), toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({\n  role: z.literal(\"tool\")\n}).transform(v => ({\n  role: v.role\n})))]);\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar ChatCompletionStreamRequestMessages$;\n(function (ChatCompletionStreamRequestMessages$) {\n  /** @deprecated use `ChatCompletionStreamRequestMessages$inboundSchema` instead. */\n  ChatCompletionStreamRequestMessages$.inboundSchema = exports.ChatCompletionStreamRequestMessages$inboundSchema;\n  /** @deprecated use `ChatCompletionStreamRequestMessages$outboundSchema` instead. */\n  ChatCompletionStreamRequestMessages$.outboundSchema = exports.ChatCompletionStreamRequestMessages$outboundSchema;\n})(ChatCompletionStreamRequestMessages$ || (exports.ChatCompletionStreamRequestMessages$ = ChatCompletionStreamRequestMessages$ = {}));\n/** @internal */\nexports.ChatCompletionStreamRequestToolChoice$inboundSchema = z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]);\n/** @internal */\nexports.ChatCompletionStreamRequestToolChoice$outboundSchema = z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]);\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar ChatCompletionStreamRequestToolChoice$;\n(function (ChatCompletionStreamRequestToolChoice$) {\n  /** @deprecated use `ChatCompletionStreamRequestToolChoice$inboundSchema` instead. */\n  ChatCompletionStreamRequestToolChoice$.inboundSchema = exports.ChatCompletionStreamRequestToolChoice$inboundSchema;\n  /** @deprecated use `ChatCompletionStreamRequestToolChoice$outboundSchema` instead. */\n  ChatCompletionStreamRequestToolChoice$.outboundSchema = exports.ChatCompletionStreamRequestToolChoice$outboundSchema;\n})(ChatCompletionStreamRequestToolChoice$ || (exports.ChatCompletionStreamRequestToolChoice$ = ChatCompletionStreamRequestToolChoice$ = {}));\n/** @internal */\nexports.ChatCompletionStreamRequest$inboundSchema = z.object({\n  model: z.nullable(z.string()),\n  temperature: z.number().default(0.7),\n  top_p: z.number().default(1),\n  max_tokens: z.nullable(z.number().int()).optional(),\n  min_tokens: z.nullable(z.number().int()).optional(),\n  stream: z.boolean().default(true),\n  stop: z.union([z.string(), z.array(z.string())]).optional(),\n  random_seed: z.nullable(z.number().int()).optional(),\n  messages: z.array(z.union([systemmessage_js_1.SystemMessage$inboundSchema.and(z.object({\n    role: z.literal(\"system\")\n  }).transform(v => ({\n    role: v.role\n  }))), usermessage_js_1.UserMessage$inboundSchema.and(z.object({\n    role: z.literal(\"user\")\n  }).transform(v => ({\n    role: v.role\n  }))), assistantmessage_js_1.AssistantMessage$inboundSchema.and(z.object({\n    role: z.literal(\"assistant\")\n  }).transform(v => ({\n    role: v.role\n  }))), toolmessage_js_1.ToolMessage$inboundSchema.and(z.object({\n    role: z.literal(\"tool\")\n  }).transform(v => ({\n    role: v.role\n  })))])),\n  response_format: responseformat_js_1.ResponseFormat$inboundSchema.optional(),\n  tools: z.nullable(z.array(tool_js_1.Tool$inboundSchema)).optional(),\n  tool_choice: z.union([toolchoice_js_1.ToolChoice$inboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$inboundSchema]).optional(),\n  safe_prompt: z.boolean().default(false)\n}).transform(v => {\n  return (0, primitives_js_1.remap)(v, {\n    \"top_p\": \"topP\",\n    \"max_tokens\": \"maxTokens\",\n    \"min_tokens\": \"minTokens\",\n    \"random_seed\": \"randomSeed\",\n    \"response_format\": \"responseFormat\",\n    \"tool_choice\": \"toolChoice\",\n    \"safe_prompt\": \"safePrompt\"\n  });\n});\n/** @internal */\nexports.ChatCompletionStreamRequest$outboundSchema = z.object({\n  model: z.nullable(z.string()),\n  temperature: z.number().default(0.7),\n  topP: z.number().default(1),\n  maxTokens: z.nullable(z.number().int()).optional(),\n  minTokens: z.nullable(z.number().int()).optional(),\n  stream: z.boolean().default(true),\n  stop: z.union([z.string(), z.array(z.string())]).optional(),\n  randomSeed: z.nullable(z.number().int()).optional(),\n  messages: z.array(z.union([systemmessage_js_1.SystemMessage$outboundSchema.and(z.object({\n    role: z.literal(\"system\")\n  }).transform(v => ({\n    role: v.role\n  }))), usermessage_js_1.UserMessage$outboundSchema.and(z.object({\n    role: z.literal(\"user\")\n  }).transform(v => ({\n    role: v.role\n  }))), assistantmessage_js_1.AssistantMessage$outboundSchema.and(z.object({\n    role: z.literal(\"assistant\")\n  }).transform(v => ({\n    role: v.role\n  }))), toolmessage_js_1.ToolMessage$outboundSchema.and(z.object({\n    role: z.literal(\"tool\")\n  }).transform(v => ({\n    role: v.role\n  })))])),\n  responseFormat: responseformat_js_1.ResponseFormat$outboundSchema.optional(),\n  tools: z.nullable(z.array(tool_js_1.Tool$outboundSchema)).optional(),\n  toolChoice: z.union([toolchoice_js_1.ToolChoice$outboundSchema, toolchoiceenum_js_1.ToolChoiceEnum$outboundSchema]).optional(),\n  safePrompt: z.boolean().default(false)\n}).transform(v => {\n  return (0, primitives_js_1.remap)(v, {\n    topP: \"top_p\",\n    maxTokens: \"max_tokens\",\n    minTokens: \"min_tokens\",\n    randomSeed: \"random_seed\",\n    responseFormat: \"response_format\",\n    toolChoice: \"tool_choice\",\n    safePrompt: \"safe_prompt\"\n  });\n});\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar ChatCompletionStreamRequest$;\n(function (ChatCompletionStreamRequest$) {\n  /** @deprecated use `ChatCompletionStreamRequest$inboundSchema` instead. */\n  ChatCompletionStreamRequest$.inboundSchema = exports.ChatCompletionStreamRequest$inboundSchema;\n  /** @deprecated use `ChatCompletionStreamRequest$outboundSchema` instead. */\n  ChatCompletionStreamRequest$.outboundSchema = exports.ChatCompletionStreamRequest$outboundSchema;\n})(ChatCompletionStreamRequest$ || (exports.ChatCompletionStreamRequest$ = ChatCompletionStreamRequest$ = {}));","map":{"version":3,"names":["z","__importStar","require","primitives_js_1","assistantmessage_js_1","responseformat_js_1","systemmessage_js_1","tool_js_1","toolchoice_js_1","toolchoiceenum_js_1","toolmessage_js_1","usermessage_js_1","exports","ChatCompletionStreamRequestStop$inboundSchema","union","string","array","ChatCompletionStreamRequestStop$outboundSchema","ChatCompletionStreamRequestStop$","inboundSchema","outboundSchema","ChatCompletionStreamRequestMessages$inboundSchema","SystemMessage$inboundSchema","and","object","role","literal","transform","v","UserMessage$inboundSchema","AssistantMessage$inboundSchema","ToolMessage$inboundSchema","ChatCompletionStreamRequestMessages$outboundSchema","SystemMessage$outboundSchema","UserMessage$outboundSchema","AssistantMessage$outboundSchema","ToolMessage$outboundSchema","ChatCompletionStreamRequestMessages$","ChatCompletionStreamRequestToolChoice$inboundSchema","ToolChoice$inboundSchema","ToolChoiceEnum$inboundSchema","ChatCompletionStreamRequestToolChoice$outboundSchema","ToolChoice$outboundSchema","ToolChoiceEnum$outboundSchema","ChatCompletionStreamRequestToolChoice$","ChatCompletionStreamRequest$inboundSchema","model","nullable","temperature","number","default","top_p","max_tokens","int","optional","min_tokens","stream","boolean","stop","random_seed","messages","response_format","ResponseFormat$inboundSchema","tools","Tool$inboundSchema","tool_choice","safe_prompt","remap","ChatCompletionStreamRequest$outboundSchema","topP","maxTokens","minTokens","randomSeed","responseFormat","ResponseFormat$outboundSchema","Tool$outboundSchema","toolChoice","safePrompt","ChatCompletionStreamRequest$"],"sources":["C:\\Users\\silvi\\OneDrive\\Escritorio\\LUISDEEEE\\School of code\\week 13\\final-project-the-visualisers\\node_modules\\@mistralai\\mistralai\\src\\models\\components\\chatcompletionstreamrequest.ts"],"sourcesContent":["/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\r\n\r\nimport * as z from \"zod\";\r\nimport { remap as remap$ } from \"../../lib/primitives.js\";\r\nimport {\r\n  AssistantMessage,\r\n  AssistantMessage$inboundSchema,\r\n  AssistantMessage$Outbound,\r\n  AssistantMessage$outboundSchema,\r\n} from \"./assistantmessage.js\";\r\nimport {\r\n  ResponseFormat,\r\n  ResponseFormat$inboundSchema,\r\n  ResponseFormat$Outbound,\r\n  ResponseFormat$outboundSchema,\r\n} from \"./responseformat.js\";\r\nimport {\r\n  SystemMessage,\r\n  SystemMessage$inboundSchema,\r\n  SystemMessage$Outbound,\r\n  SystemMessage$outboundSchema,\r\n} from \"./systemmessage.js\";\r\nimport {\r\n  Tool,\r\n  Tool$inboundSchema,\r\n  Tool$Outbound,\r\n  Tool$outboundSchema,\r\n} from \"./tool.js\";\r\nimport {\r\n  ToolChoice,\r\n  ToolChoice$inboundSchema,\r\n  ToolChoice$Outbound,\r\n  ToolChoice$outboundSchema,\r\n} from \"./toolchoice.js\";\r\nimport {\r\n  ToolChoiceEnum,\r\n  ToolChoiceEnum$inboundSchema,\r\n  ToolChoiceEnum$outboundSchema,\r\n} from \"./toolchoiceenum.js\";\r\nimport {\r\n  ToolMessage,\r\n  ToolMessage$inboundSchema,\r\n  ToolMessage$Outbound,\r\n  ToolMessage$outboundSchema,\r\n} from \"./toolmessage.js\";\r\nimport {\r\n  UserMessage,\r\n  UserMessage$inboundSchema,\r\n  UserMessage$Outbound,\r\n  UserMessage$outboundSchema,\r\n} from \"./usermessage.js\";\r\n\r\n/**\r\n * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array\r\n */\r\nexport type ChatCompletionStreamRequestStop = string | Array<string>;\r\n\r\nexport type ChatCompletionStreamRequestMessages =\r\n  | (SystemMessage & { role: \"system\" })\r\n  | (UserMessage & { role: \"user\" })\r\n  | (AssistantMessage & { role: \"assistant\" })\r\n  | (ToolMessage & { role: \"tool\" });\r\n\r\nexport type ChatCompletionStreamRequestToolChoice = ToolChoice | ToolChoiceEnum;\r\n\r\nexport type ChatCompletionStreamRequest = {\r\n  /**\r\n   * ID of the model to use. You can use the [List Available Models](/api/#tag/models/operation/list_models_v1_models_get) API to see all of your available models, or see our [Model overview](/models) for model descriptions.\r\n   */\r\n  model: string | null;\r\n  /**\r\n   * What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.\r\n   */\r\n  temperature?: number | undefined;\r\n  /**\r\n   * Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or `temperature` but not both.\r\n   */\r\n  topP?: number | undefined;\r\n  /**\r\n   * The maximum number of tokens to generate in the completion. The token count of your prompt plus `max_tokens` cannot exceed the model's context length.\r\n   */\r\n  maxTokens?: number | null | undefined;\r\n  /**\r\n   * The minimum number of tokens to generate in the completion.\r\n   */\r\n  minTokens?: number | null | undefined;\r\n  stream?: boolean | undefined;\r\n  /**\r\n   * Stop generation if this token is detected. Or if one of these tokens is detected when providing an array\r\n   */\r\n  stop?: string | Array<string> | undefined;\r\n  /**\r\n   * The seed to use for random sampling. If set, different calls will generate deterministic results.\r\n   */\r\n  randomSeed?: number | null | undefined;\r\n  /**\r\n   * The prompt(s) to generate completions for, encoded as a list of dict with role and content.\r\n   */\r\n  messages: Array<\r\n    | (SystemMessage & { role: \"system\" })\r\n    | (UserMessage & { role: \"user\" })\r\n    | (AssistantMessage & { role: \"assistant\" })\r\n    | (ToolMessage & { role: \"tool\" })\r\n  >;\r\n  responseFormat?: ResponseFormat | undefined;\r\n  tools?: Array<Tool> | null | undefined;\r\n  toolChoice?: ToolChoice | ToolChoiceEnum | undefined;\r\n  /**\r\n   * Whether to inject a safety prompt before all conversations.\r\n   */\r\n  safePrompt?: boolean | undefined;\r\n};\r\n\r\n/** @internal */\r\nexport const ChatCompletionStreamRequestStop$inboundSchema: z.ZodType<\r\n  ChatCompletionStreamRequestStop,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.union([z.string(), z.array(z.string())]);\r\n\r\n/** @internal */\r\nexport type ChatCompletionStreamRequestStop$Outbound = string | Array<string>;\r\n\r\n/** @internal */\r\nexport const ChatCompletionStreamRequestStop$outboundSchema: z.ZodType<\r\n  ChatCompletionStreamRequestStop$Outbound,\r\n  z.ZodTypeDef,\r\n  ChatCompletionStreamRequestStop\r\n> = z.union([z.string(), z.array(z.string())]);\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace ChatCompletionStreamRequestStop$ {\r\n  /** @deprecated use `ChatCompletionStreamRequestStop$inboundSchema` instead. */\r\n  export const inboundSchema = ChatCompletionStreamRequestStop$inboundSchema;\r\n  /** @deprecated use `ChatCompletionStreamRequestStop$outboundSchema` instead. */\r\n  export const outboundSchema = ChatCompletionStreamRequestStop$outboundSchema;\r\n  /** @deprecated use `ChatCompletionStreamRequestStop$Outbound` instead. */\r\n  export type Outbound = ChatCompletionStreamRequestStop$Outbound;\r\n}\r\n\r\n/** @internal */\r\nexport const ChatCompletionStreamRequestMessages$inboundSchema: z.ZodType<\r\n  ChatCompletionStreamRequestMessages,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.union([\r\n  SystemMessage$inboundSchema.and(\r\n    z.object({ role: z.literal(\"system\") }).transform((v) => ({\r\n      role: v.role,\r\n    })),\r\n  ),\r\n  UserMessage$inboundSchema.and(\r\n    z.object({ role: z.literal(\"user\") }).transform((v) => ({ role: v.role })),\r\n  ),\r\n  AssistantMessage$inboundSchema.and(\r\n    z.object({ role: z.literal(\"assistant\") }).transform((v) => ({\r\n      role: v.role,\r\n    })),\r\n  ),\r\n  ToolMessage$inboundSchema.and(\r\n    z.object({ role: z.literal(\"tool\") }).transform((v) => ({ role: v.role })),\r\n  ),\r\n]);\r\n\r\n/** @internal */\r\nexport type ChatCompletionStreamRequestMessages$Outbound =\r\n  | (SystemMessage$Outbound & { role: \"system\" })\r\n  | (UserMessage$Outbound & { role: \"user\" })\r\n  | (AssistantMessage$Outbound & { role: \"assistant\" })\r\n  | (ToolMessage$Outbound & { role: \"tool\" });\r\n\r\n/** @internal */\r\nexport const ChatCompletionStreamRequestMessages$outboundSchema: z.ZodType<\r\n  ChatCompletionStreamRequestMessages$Outbound,\r\n  z.ZodTypeDef,\r\n  ChatCompletionStreamRequestMessages\r\n> = z.union([\r\n  SystemMessage$outboundSchema.and(\r\n    z.object({ role: z.literal(\"system\") }).transform((v) => ({\r\n      role: v.role,\r\n    })),\r\n  ),\r\n  UserMessage$outboundSchema.and(\r\n    z.object({ role: z.literal(\"user\") }).transform((v) => ({ role: v.role })),\r\n  ),\r\n  AssistantMessage$outboundSchema.and(\r\n    z.object({ role: z.literal(\"assistant\") }).transform((v) => ({\r\n      role: v.role,\r\n    })),\r\n  ),\r\n  ToolMessage$outboundSchema.and(\r\n    z.object({ role: z.literal(\"tool\") }).transform((v) => ({ role: v.role })),\r\n  ),\r\n]);\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace ChatCompletionStreamRequestMessages$ {\r\n  /** @deprecated use `ChatCompletionStreamRequestMessages$inboundSchema` instead. */\r\n  export const inboundSchema =\r\n    ChatCompletionStreamRequestMessages$inboundSchema;\r\n  /** @deprecated use `ChatCompletionStreamRequestMessages$outboundSchema` instead. */\r\n  export const outboundSchema =\r\n    ChatCompletionStreamRequestMessages$outboundSchema;\r\n  /** @deprecated use `ChatCompletionStreamRequestMessages$Outbound` instead. */\r\n  export type Outbound = ChatCompletionStreamRequestMessages$Outbound;\r\n}\r\n\r\n/** @internal */\r\nexport const ChatCompletionStreamRequestToolChoice$inboundSchema: z.ZodType<\r\n  ChatCompletionStreamRequestToolChoice,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.union([ToolChoice$inboundSchema, ToolChoiceEnum$inboundSchema]);\r\n\r\n/** @internal */\r\nexport type ChatCompletionStreamRequestToolChoice$Outbound =\r\n  | ToolChoice$Outbound\r\n  | string;\r\n\r\n/** @internal */\r\nexport const ChatCompletionStreamRequestToolChoice$outboundSchema: z.ZodType<\r\n  ChatCompletionStreamRequestToolChoice$Outbound,\r\n  z.ZodTypeDef,\r\n  ChatCompletionStreamRequestToolChoice\r\n> = z.union([ToolChoice$outboundSchema, ToolChoiceEnum$outboundSchema]);\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace ChatCompletionStreamRequestToolChoice$ {\r\n  /** @deprecated use `ChatCompletionStreamRequestToolChoice$inboundSchema` instead. */\r\n  export const inboundSchema =\r\n    ChatCompletionStreamRequestToolChoice$inboundSchema;\r\n  /** @deprecated use `ChatCompletionStreamRequestToolChoice$outboundSchema` instead. */\r\n  export const outboundSchema =\r\n    ChatCompletionStreamRequestToolChoice$outboundSchema;\r\n  /** @deprecated use `ChatCompletionStreamRequestToolChoice$Outbound` instead. */\r\n  export type Outbound = ChatCompletionStreamRequestToolChoice$Outbound;\r\n}\r\n\r\n/** @internal */\r\nexport const ChatCompletionStreamRequest$inboundSchema: z.ZodType<\r\n  ChatCompletionStreamRequest,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.object({\r\n  model: z.nullable(z.string()),\r\n  temperature: z.number().default(0.7),\r\n  top_p: z.number().default(1),\r\n  max_tokens: z.nullable(z.number().int()).optional(),\r\n  min_tokens: z.nullable(z.number().int()).optional(),\r\n  stream: z.boolean().default(true),\r\n  stop: z.union([z.string(), z.array(z.string())]).optional(),\r\n  random_seed: z.nullable(z.number().int()).optional(),\r\n  messages: z.array(\r\n    z.union([\r\n      SystemMessage$inboundSchema.and(\r\n        z.object({ role: z.literal(\"system\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      UserMessage$inboundSchema.and(\r\n        z.object({ role: z.literal(\"user\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      AssistantMessage$inboundSchema.and(\r\n        z.object({ role: z.literal(\"assistant\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      ToolMessage$inboundSchema.and(\r\n        z.object({ role: z.literal(\"tool\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n    ]),\r\n  ),\r\n  response_format: ResponseFormat$inboundSchema.optional(),\r\n  tools: z.nullable(z.array(Tool$inboundSchema)).optional(),\r\n  tool_choice: z.union([ToolChoice$inboundSchema, ToolChoiceEnum$inboundSchema])\r\n    .optional(),\r\n  safe_prompt: z.boolean().default(false),\r\n}).transform((v) => {\r\n  return remap$(v, {\r\n    \"top_p\": \"topP\",\r\n    \"max_tokens\": \"maxTokens\",\r\n    \"min_tokens\": \"minTokens\",\r\n    \"random_seed\": \"randomSeed\",\r\n    \"response_format\": \"responseFormat\",\r\n    \"tool_choice\": \"toolChoice\",\r\n    \"safe_prompt\": \"safePrompt\",\r\n  });\r\n});\r\n\r\n/** @internal */\r\nexport type ChatCompletionStreamRequest$Outbound = {\r\n  model: string | null;\r\n  temperature: number;\r\n  top_p: number;\r\n  max_tokens?: number | null | undefined;\r\n  min_tokens?: number | null | undefined;\r\n  stream: boolean;\r\n  stop?: string | Array<string> | undefined;\r\n  random_seed?: number | null | undefined;\r\n  messages: Array<\r\n    | (SystemMessage$Outbound & { role: \"system\" })\r\n    | (UserMessage$Outbound & { role: \"user\" })\r\n    | (AssistantMessage$Outbound & { role: \"assistant\" })\r\n    | (ToolMessage$Outbound & { role: \"tool\" })\r\n  >;\r\n  response_format?: ResponseFormat$Outbound | undefined;\r\n  tools?: Array<Tool$Outbound> | null | undefined;\r\n  tool_choice?: ToolChoice$Outbound | string | undefined;\r\n  safe_prompt: boolean;\r\n};\r\n\r\n/** @internal */\r\nexport const ChatCompletionStreamRequest$outboundSchema: z.ZodType<\r\n  ChatCompletionStreamRequest$Outbound,\r\n  z.ZodTypeDef,\r\n  ChatCompletionStreamRequest\r\n> = z.object({\r\n  model: z.nullable(z.string()),\r\n  temperature: z.number().default(0.7),\r\n  topP: z.number().default(1),\r\n  maxTokens: z.nullable(z.number().int()).optional(),\r\n  minTokens: z.nullable(z.number().int()).optional(),\r\n  stream: z.boolean().default(true),\r\n  stop: z.union([z.string(), z.array(z.string())]).optional(),\r\n  randomSeed: z.nullable(z.number().int()).optional(),\r\n  messages: z.array(\r\n    z.union([\r\n      SystemMessage$outboundSchema.and(\r\n        z.object({ role: z.literal(\"system\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      UserMessage$outboundSchema.and(\r\n        z.object({ role: z.literal(\"user\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      AssistantMessage$outboundSchema.and(\r\n        z.object({ role: z.literal(\"assistant\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n      ToolMessage$outboundSchema.and(\r\n        z.object({ role: z.literal(\"tool\") }).transform((v) => ({\r\n          role: v.role,\r\n        })),\r\n      ),\r\n    ]),\r\n  ),\r\n  responseFormat: ResponseFormat$outboundSchema.optional(),\r\n  tools: z.nullable(z.array(Tool$outboundSchema)).optional(),\r\n  toolChoice: z.union([\r\n    ToolChoice$outboundSchema,\r\n    ToolChoiceEnum$outboundSchema,\r\n  ]).optional(),\r\n  safePrompt: z.boolean().default(false),\r\n}).transform((v) => {\r\n  return remap$(v, {\r\n    topP: \"top_p\",\r\n    maxTokens: \"max_tokens\",\r\n    minTokens: \"min_tokens\",\r\n    randomSeed: \"random_seed\",\r\n    responseFormat: \"response_format\",\r\n    toolChoice: \"tool_choice\",\r\n    safePrompt: \"safe_prompt\",\r\n  });\r\n});\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace ChatCompletionStreamRequest$ {\r\n  /** @deprecated use `ChatCompletionStreamRequest$inboundSchema` instead. */\r\n  export const inboundSchema = ChatCompletionStreamRequest$inboundSchema;\r\n  /** @deprecated use `ChatCompletionStreamRequest$outboundSchema` instead. */\r\n  export const outboundSchema = ChatCompletionStreamRequest$outboundSchema;\r\n  /** @deprecated use `ChatCompletionStreamRequest$Outbound` instead. */\r\n  export type Outbound = ChatCompletionStreamRequest$Outbound;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}