{"ast":null,"code":"\"use strict\";\n\n/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventStream = void 0;\nexports.discardSentinel = discardSentinel;\nconst LF = 0x0a;\nconst CR = 0x0d;\nconst NEWLINE_CHARS = new Set([LF, CR]);\nconst MESSAGE_BOUNDARIES = [new Uint8Array([CR, LF, CR, LF]), new Uint8Array([CR, CR]), new Uint8Array([LF, LF])];\nclass EventStream {\n  constructor(init) {\n    this.stream = init.stream;\n    this.decoder = init.decoder;\n  }\n  async *[Symbol.asyncIterator]() {\n    const reader = this.stream.getReader();\n    let buffer = new Uint8Array([]);\n    let position = 0;\n    try {\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) {\n          break;\n        }\n        const newBuffer = new Uint8Array(buffer.length + value.length);\n        newBuffer.set(buffer);\n        newBuffer.set(value, buffer.length);\n        buffer = newBuffer;\n        for (let i = position; i < buffer.length; i++) {\n          const boundary = findBoundary(buffer, i);\n          if (boundary == null) {\n            continue;\n          }\n          const chunk = buffer.slice(position, i);\n          position = i + boundary.length;\n          const event = parseEvent(chunk, this.decoder);\n          if (event != null) {\n            yield event;\n          }\n        }\n        if (position > 0) {\n          buffer = buffer.slice(position);\n          position = 0;\n        }\n      }\n      if (buffer.length > 0) {\n        const event = parseEvent(buffer, this.decoder);\n        if (event != null) {\n          yield event;\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n}\nexports.EventStream = EventStream;\nfunction findBoundary(buffer, start) {\n  const char1 = buffer[start];\n  const char2 = buffer[start + 1];\n  // Don't bother checking if the first two characters are not new line\n  // characters.\n  if (char1 == null || char2 == null || !NEWLINE_CHARS.has(char1) || !NEWLINE_CHARS.has(char2)) {\n    return null;\n  }\n  for (const s of MESSAGE_BOUNDARIES) {\n    const seq = peekSequence(start, buffer, s);\n    if (seq != null) {\n      return seq;\n    }\n  }\n  return null;\n}\nfunction peekSequence(position, buffer, sequence) {\n  if (sequence.length > buffer.length - position) {\n    return null;\n  }\n  for (let i = 0; i < sequence.length; i++) {\n    if (buffer[position + i] !== sequence[i]) {\n      return null;\n    }\n  }\n  return sequence;\n}\nfunction parseEvent(chunk, decoder) {\n  var _a;\n  if (!chunk.length) {\n    return null;\n  }\n  const td = new TextDecoder();\n  const raw = td.decode(chunk);\n  const lines = raw.split(/\\r?\\n|\\r/g);\n  let publish = false;\n  const rawEvent = {};\n  for (const line of lines) {\n    if (!line) {\n      continue;\n    }\n    const delim = line.indexOf(\":\");\n    // Lines starting with a colon are ignored.\n    if (delim === 0) {\n      continue;\n    }\n    const field = delim > 0 ? line.substring(0, delim) : \"\";\n    let value = delim > 0 ? line.substring(delim + 1) : \"\";\n    if (value.charAt(0) === \" \") {\n      value = value.substring(1);\n    }\n    switch (field) {\n      case \"event\":\n        {\n          publish = true;\n          rawEvent.event = value;\n          break;\n        }\n      case \"data\":\n        {\n          publish = true;\n          (_a = rawEvent.data) !== null && _a !== void 0 ? _a : rawEvent.data = \"\";\n          rawEvent.data += value + \"\\n\";\n          break;\n        }\n      case \"id\":\n        {\n          publish = true;\n          rawEvent.id = value;\n          break;\n        }\n      case \"retry\":\n        {\n          const r = parseInt(value, 10);\n          if (!Number.isNaN(r)) {\n            publish = true;\n            rawEvent.retry = r;\n          }\n          break;\n        }\n    }\n  }\n  if (!publish) {\n    return null;\n  }\n  if (rawEvent.data != null) {\n    rawEvent.data = rawEvent.data.slice(0, -1);\n  }\n  return decoder(rawEvent);\n}\nfunction discardSentinel(stream, sentinel) {\n  return new ReadableStream({\n    async start(controller) {\n      let buffer = new Uint8Array([]);\n      let position = 0;\n      let done = false;\n      let discard = false;\n      const rdr = stream.getReader();\n      try {\n        while (!done) {\n          const result = await rdr.read();\n          const value = result.value;\n          done = done || result.done;\n          // We keep consuming from the source to its completion so it can\n          // flush all its contents and release resources.\n          if (discard) {\n            continue;\n          }\n          if (typeof value === \"undefined\") {\n            continue;\n          }\n          const newBuffer = new Uint8Array(buffer.length + value.length);\n          newBuffer.set(buffer);\n          newBuffer.set(value, buffer.length);\n          buffer = newBuffer;\n          for (let i = position; i < buffer.length; i++) {\n            const boundary = findBoundary(buffer, i);\n            if (boundary == null) {\n              continue;\n            }\n            const start = position;\n            const chunk = buffer.slice(start, i);\n            position = i + boundary.length;\n            const event = parseEvent(chunk, id);\n            if ((event === null || event === void 0 ? void 0 : event.data) === sentinel) {\n              controller.enqueue(buffer.slice(0, start));\n              discard = true;\n            } else {\n              controller.enqueue(buffer.slice(0, position));\n              buffer = buffer.slice(position);\n              position = 0;\n            }\n          }\n        }\n      } catch (e) {\n        controller.error(e);\n      } finally {\n        // If the source stream terminates, flush its contents and terminate.\n        // If the sentinel event was found, flush everything up to its start.\n        controller.close();\n        rdr.releaseLock();\n      }\n    }\n  });\n}\nfunction id(v) {\n  return v;\n}","map":{"version":3,"names":["exports","discardSentinel","LF","CR","NEWLINE_CHARS","Set","MESSAGE_BOUNDARIES","Uint8Array","EventStream","constructor","init","stream","decoder","Symbol","asyncIterator","reader","getReader","buffer","position","done","value","read","newBuffer","length","set","i","boundary","findBoundary","chunk","slice","event","parseEvent","releaseLock","start","char1","char2","has","s","seq","peekSequence","sequence","td","TextDecoder","raw","decode","lines","split","publish","rawEvent","line","delim","indexOf","field","substring","charAt","_a","data","id","r","parseInt","Number","isNaN","retry","sentinel","ReadableStream","controller","discard","rdr","result","enqueue","e","error","close","v"],"sources":["/Users/emilijablinkeviciute/Desktop/REPOS/Visualisers project/final-project-the-visualisers/my-app/node_modules/@mistralai/mistralai/src/lib/event-streams.ts"],"sourcesContent":["/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nexport type ServerEvent<T> = {\n  data?: T | undefined;\n  event?: string | undefined;\n  retry?: number | undefined;\n  id?: string | undefined;\n};\nconst LF = 0x0a;\nconst CR = 0x0d;\nconst NEWLINE_CHARS = new Set([LF, CR]);\nconst MESSAGE_BOUNDARIES = [\n  new Uint8Array([CR, LF, CR, LF]),\n  new Uint8Array([CR, CR]),\n  new Uint8Array([LF, LF]),\n];\n\nexport class EventStream<Event extends ServerEvent<unknown>> {\n  private readonly stream: ReadableStream<Uint8Array>;\n  private readonly decoder: (rawEvent: ServerEvent<string>) => Event;\n\n  constructor(init: {\n    stream: ReadableStream<Uint8Array>;\n    decoder: (rawEvent: ServerEvent<string>) => Event;\n  }) {\n    this.stream = init.stream;\n    this.decoder = init.decoder;\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<Event, void, unknown> {\n    const reader = this.stream.getReader();\n    let buffer = new Uint8Array([]);\n    let position = 0;\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          break;\n        }\n\n        const newBuffer = new Uint8Array(buffer.length + value.length);\n        newBuffer.set(buffer);\n        newBuffer.set(value, buffer.length);\n        buffer = newBuffer;\n\n        for (let i = position; i < buffer.length; i++) {\n          const boundary = findBoundary(buffer, i);\n          if (boundary == null) {\n            continue;\n          }\n\n          const chunk = buffer.slice(position, i);\n          position = i + boundary.length;\n          const event = parseEvent(chunk, this.decoder);\n          if (event != null) {\n            yield event;\n          }\n        }\n\n        if (position > 0) {\n          buffer = buffer.slice(position);\n          position = 0;\n        }\n      }\n\n      if (buffer.length > 0) {\n        const event = parseEvent(buffer, this.decoder);\n        if (event != null) {\n          yield event;\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n}\n\nfunction findBoundary(buffer: Uint8Array, start: number): Uint8Array | null {\n  const char1 = buffer[start];\n  const char2 = buffer[start + 1];\n\n  // Don't bother checking if the first two characters are not new line\n  // characters.\n  if (\n    char1 == null\n    || char2 == null\n    || !NEWLINE_CHARS.has(char1)\n    || !NEWLINE_CHARS.has(char2)\n  ) {\n    return null;\n  }\n\n  for (const s of MESSAGE_BOUNDARIES) {\n    const seq = peekSequence(start, buffer, s);\n    if (seq != null) {\n      return seq;\n    }\n  }\n\n  return null;\n}\n\nfunction peekSequence(\n  position: number,\n  buffer: Uint8Array,\n  sequence: Uint8Array,\n): Uint8Array | null {\n  if (sequence.length > buffer.length - position) {\n    return null;\n  }\n\n  for (let i = 0; i < sequence.length; i++) {\n    if (buffer[position + i] !== sequence[i]) {\n      return null;\n    }\n  }\n\n  return sequence;\n}\n\nfunction parseEvent<Event extends ServerEvent<unknown>>(\n  chunk: Uint8Array,\n  decoder: (rawEvent: ServerEvent<string>) => Event,\n) {\n  if (!chunk.length) {\n    return null;\n  }\n\n  const td = new TextDecoder();\n  const raw = td.decode(chunk);\n  const lines = raw.split(/\\r?\\n|\\r/g);\n  let publish = false;\n  const rawEvent: ServerEvent<string> = {};\n\n  for (const line of lines) {\n    if (!line) {\n      continue;\n    }\n\n    const delim = line.indexOf(\":\");\n    // Lines starting with a colon are ignored.\n    if (delim === 0) {\n      continue;\n    }\n\n    const field = delim > 0 ? line.substring(0, delim) : \"\";\n    let value = delim > 0 ? line.substring(delim + 1) : \"\";\n    if (value.charAt(0) === \" \") {\n      value = value.substring(1);\n    }\n\n    switch (field) {\n      case \"event\": {\n        publish = true;\n        rawEvent.event = value;\n        break;\n      }\n      case \"data\": {\n        publish = true;\n        rawEvent.data ??= \"\";\n        rawEvent.data += value + \"\\n\";\n        break;\n      }\n      case \"id\": {\n        publish = true;\n        rawEvent.id = value;\n        break;\n      }\n      case \"retry\": {\n        const r = parseInt(value, 10);\n        if (!Number.isNaN(r)) {\n          publish = true;\n          rawEvent.retry = r;\n        }\n        break;\n      }\n    }\n  }\n\n  if (!publish) {\n    return null;\n  }\n\n  if (rawEvent.data != null) {\n    rawEvent.data = rawEvent.data.slice(0, -1);\n  }\n\n  return decoder(rawEvent);\n}\n\nexport function discardSentinel(\n  stream: ReadableStream<Uint8Array>,\n  sentinel: string,\n): ReadableStream<Uint8Array> {\n  return new ReadableStream<Uint8Array>({\n    async start(controller) {\n      let buffer = new Uint8Array([]);\n      let position = 0;\n      let done = false;\n      let discard = false;\n      const rdr = stream.getReader();\n      try {\n        while (!done) {\n          const result = await rdr.read();\n          const value = result.value;\n          done = done || result.done;\n          // We keep consuming from the source to its completion so it can\n          // flush all its contents and release resources.\n          if (discard) {\n            continue;\n          }\n          if (typeof value === \"undefined\") {\n            continue;\n          }\n\n          const newBuffer = new Uint8Array(buffer.length + value.length);\n          newBuffer.set(buffer);\n          newBuffer.set(value, buffer.length);\n          buffer = newBuffer;\n\n          for (let i = position; i < buffer.length; i++) {\n            const boundary = findBoundary(buffer, i);\n            if (boundary == null) {\n              continue;\n            }\n\n            const start = position;\n            const chunk = buffer.slice(start, i);\n            position = i + boundary.length;\n            const event = parseEvent(chunk, id);\n            if (event?.data === sentinel) {\n              controller.enqueue(buffer.slice(0, start));\n              discard = true;\n            } else {\n              controller.enqueue(buffer.slice(0, position));\n              buffer = buffer.slice(position);\n              position = 0;\n            }\n          }\n        }\n      } catch (e) {\n        controller.error(e);\n      } finally {\n        // If the source stream terminates, flush its contents and terminate.\n        // If the sentinel event was found, flush everything up to its start.\n        controller.close();\n        rdr.releaseLock();\n      }\n    },\n  });\n}\n\nfunction id<T>(v: T): T {\n  return v;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}