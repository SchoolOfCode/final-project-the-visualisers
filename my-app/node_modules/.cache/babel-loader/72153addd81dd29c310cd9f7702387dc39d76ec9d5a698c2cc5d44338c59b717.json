{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionError = exports.RequestTimeoutError = exports.RequestAbortedError = exports.InvalidRequestError = exports.UnexpectedClientError = exports.HTTPClientError = void 0;\n/**\r\n * Base class for all HTTP errors.\r\n */\nclass HTTPClientError extends Error {\n  constructor(message, opts) {\n    let msg = message;\n    if (opts === null || opts === void 0 ? void 0 : opts.cause) {\n      msg += `: ${opts.cause}`;\n    }\n    super(msg, opts);\n    this.name = \"HTTPClientError\";\n    // In older runtimes, the cause field would not have been assigned through\n    // the super() call.\n    if (typeof this.cause === \"undefined\") {\n      this.cause = opts === null || opts === void 0 ? void 0 : opts.cause;\n    }\n  }\n}\nexports.HTTPClientError = HTTPClientError;\n/**\r\n * An error to capture unrecognised or unexpected errors when making HTTP calls.\r\n */\nclass UnexpectedClientError extends HTTPClientError {\n  constructor() {\n    super(...arguments);\n    this.name = \"UnexpectedClientError\";\n  }\n}\nexports.UnexpectedClientError = UnexpectedClientError;\n/**\r\n * An error that is raised when any inputs used to create a request are invalid.\r\n */\nclass InvalidRequestError extends HTTPClientError {\n  constructor() {\n    super(...arguments);\n    this.name = \"InvalidRequestError\";\n  }\n}\nexports.InvalidRequestError = InvalidRequestError;\n/**\r\n * An error that is raised when a HTTP request was aborted by the client error.\r\n */\nclass RequestAbortedError extends HTTPClientError {\n  constructor() {\n    super(...arguments);\n    this.name = \"RequestAbortedError\";\n  }\n}\nexports.RequestAbortedError = RequestAbortedError;\n/**\r\n * An error that is raised when a HTTP request timed out due to an AbortSignal\r\n * signal timeout.\r\n */\nclass RequestTimeoutError extends HTTPClientError {\n  constructor() {\n    super(...arguments);\n    this.name = \"RequestTimeoutError\";\n  }\n}\nexports.RequestTimeoutError = RequestTimeoutError;\n/**\r\n * An error that is raised when a HTTP client is unable to make a request to\r\n * a server.\r\n */\nclass ConnectionError extends HTTPClientError {\n  constructor() {\n    super(...arguments);\n    this.name = \"ConnectionError\";\n  }\n}\nexports.ConnectionError = ConnectionError;","map":{"version":3,"names":["HTTPClientError","Error","constructor","message","opts","msg","cause","name","exports","UnexpectedClientError","InvalidRequestError","RequestAbortedError","RequestTimeoutError","ConnectionError"],"sources":["C:\\Users\\silvi\\OneDrive\\Escritorio\\LUISDEEEE\\School of code\\week 13\\final-project-the-visualisers\\node_modules\\@mistralai\\mistralai\\src\\models\\errors\\httpclienterrors.ts"],"sourcesContent":["/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\r\n\r\n/**\r\n * Base class for all HTTP errors.\r\n */\r\nexport class HTTPClientError extends Error {\r\n  /** The underlying cause of the error. */\r\n  override readonly cause: unknown;\r\n  override name = \"HTTPClientError\";\r\n  constructor(message: string, opts?: { cause?: unknown }) {\r\n    let msg = message;\r\n    if (opts?.cause) {\r\n      msg += `: ${opts.cause}`;\r\n    }\r\n\r\n    super(msg, opts);\r\n    // In older runtimes, the cause field would not have been assigned through\r\n    // the super() call.\r\n    if (typeof this.cause === \"undefined\") {\r\n      this.cause = opts?.cause;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * An error to capture unrecognised or unexpected errors when making HTTP calls.\r\n */\r\nexport class UnexpectedClientError extends HTTPClientError {\r\n  override name = \"UnexpectedClientError\";\r\n}\r\n\r\n/**\r\n * An error that is raised when any inputs used to create a request are invalid.\r\n */\r\nexport class InvalidRequestError extends HTTPClientError {\r\n  override name = \"InvalidRequestError\";\r\n}\r\n\r\n/**\r\n * An error that is raised when a HTTP request was aborted by the client error.\r\n */\r\nexport class RequestAbortedError extends HTTPClientError {\r\n  override readonly name = \"RequestAbortedError\";\r\n}\r\n\r\n/**\r\n * An error that is raised when a HTTP request timed out due to an AbortSignal\r\n * signal timeout.\r\n */\r\nexport class RequestTimeoutError extends HTTPClientError {\r\n  override readonly name = \"RequestTimeoutError\";\r\n}\r\n\r\n/**\r\n * An error that is raised when a HTTP client is unable to make a request to\r\n * a server.\r\n */\r\nexport class ConnectionError extends HTTPClientError {\r\n  override readonly name = \"ConnectionError\";\r\n}\r\n"],"mappings":";;AAAA;;;;;;;AAIA;;;AAGA,MAAaA,eAAgB,SAAQC,KAAK;EAIxCC,YAAYC,OAAe,EAAEC,IAA0B;IACrD,IAAIC,GAAG,GAAGF,OAAO;IACjB,IAAIC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,KAAK,EAAE;MACfD,GAAG,IAAI,KAAKD,IAAI,CAACE,KAAK,EAAE;IAC1B;IAEA,KAAK,CAACD,GAAG,EAAED,IAAI,CAAC;IAPT,KAAAG,IAAI,GAAG,iBAAiB;IAQ/B;IACA;IACA,IAAI,OAAO,IAAI,CAACD,KAAK,KAAK,WAAW,EAAE;MACrC,IAAI,CAACA,KAAK,GAAGF,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,KAAK;IAC1B;EACF;;AAhBFE,OAAA,CAAAR,eAAA,GAAAA,eAAA;AAmBA;;;AAGA,MAAaS,qBAAsB,SAAQT,eAAe;EAA1DE,YAAA;;IACW,KAAAK,IAAI,GAAG,uBAAuB;EACzC;;AAFAC,OAAA,CAAAC,qBAAA,GAAAA,qBAAA;AAIA;;;AAGA,MAAaC,mBAAoB,SAAQV,eAAe;EAAxDE,YAAA;;IACW,KAAAK,IAAI,GAAG,qBAAqB;EACvC;;AAFAC,OAAA,CAAAE,mBAAA,GAAAA,mBAAA;AAIA;;;AAGA,MAAaC,mBAAoB,SAAQX,eAAe;EAAxDE,YAAA;;IACoB,KAAAK,IAAI,GAAG,qBAAqB;EAChD;;AAFAC,OAAA,CAAAG,mBAAA,GAAAA,mBAAA;AAIA;;;;AAIA,MAAaC,mBAAoB,SAAQZ,eAAe;EAAxDE,YAAA;;IACoB,KAAAK,IAAI,GAAG,qBAAqB;EAChD;;AAFAC,OAAA,CAAAI,mBAAA,GAAAA,mBAAA;AAIA;;;;AAIA,MAAaC,eAAgB,SAAQb,eAAe;EAApDE,YAAA;;IACoB,KAAAK,IAAI,GAAG,iBAAiB;EAC5C;;AAFAC,OAAA,CAAAK,eAAA,GAAAA,eAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}