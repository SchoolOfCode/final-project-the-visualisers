{"ast":null,"code":"\"use strict\";\n\n/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = parse;\nexports.safeParse = safeParse;\nexports.collectExtraKeys = collectExtraKeys;\nconst zod_1 = require(\"zod\");\nconst sdkvalidationerror_js_1 = require(\"../models/errors/sdkvalidationerror.js\");\nconst fp_js_1 = require(\"../types/fp.js\");\n/**\n * Utility function that executes some code which may throw a ZodError. It\n * intercepts this error and converts it to an SDKValidationError so as to not\n * leak Zod implementation details to user code.\n */\nfunction parse(rawValue, fn, errorMessage) {\n  try {\n    return fn(rawValue);\n  } catch (err) {\n    if (err instanceof zod_1.ZodError) {\n      throw new sdkvalidationerror_js_1.SDKValidationError(errorMessage, err, rawValue);\n    }\n    throw err;\n  }\n}\n/**\n * Utility function that executes some code which may result in a ZodError. It\n * intercepts this error and converts it to an SDKValidationError so as to not\n * leak Zod implementation details to user code.\n */\nfunction safeParse(rawValue, fn, errorMessage) {\n  try {\n    return (0, fp_js_1.OK)(fn(rawValue));\n  } catch (err) {\n    return (0, fp_js_1.ERR)(new sdkvalidationerror_js_1.SDKValidationError(errorMessage, err, rawValue));\n  }\n}\nfunction collectExtraKeys(obj, extrasKey) {\n  return obj.transform(val => {\n    const extras = {};\n    const {\n      shape\n    } = obj;\n    for (const [key] of Object.entries(val)) {\n      if (key in shape) {\n        continue;\n      }\n      const v = val[key];\n      if (typeof v === \"undefined\") {\n        continue;\n      }\n      extras[key] = v;\n      delete val[key];\n    }\n    return {\n      ...val,\n      [extrasKey]: extras\n    };\n  });\n}","map":{"version":3,"names":["exports","parse","safeParse","collectExtraKeys","zod_1","require","sdkvalidationerror_js_1","fp_js_1","rawValue","fn","errorMessage","err","ZodError","SDKValidationError","OK","ERR","obj","extrasKey","transform","val","extras","shape","key","Object","entries","v"],"sources":["/Users/emilijablinkeviciute/Desktop/REPOS/Visualisers project/final-project-the-visualisers/my-app/node_modules/@mistralai/mistralai/src/lib/schemas.ts"],"sourcesContent":["/*\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\n */\n\nimport {\n  output,\n  ZodEffects,\n  ZodError,\n  ZodObject,\n  ZodRawShape,\n  ZodTypeAny,\n} from \"zod\";\nimport { SDKValidationError } from \"../models/errors/sdkvalidationerror.js\";\nimport { ERR, OK, Result } from \"../types/fp.js\";\n\n/**\n * Utility function that executes some code which may throw a ZodError. It\n * intercepts this error and converts it to an SDKValidationError so as to not\n * leak Zod implementation details to user code.\n */\nexport function parse<Inp, Out>(\n  rawValue: Inp,\n  fn: (value: Inp) => Out,\n  errorMessage: string,\n): Out {\n  try {\n    return fn(rawValue);\n  } catch (err) {\n    if (err instanceof ZodError) {\n      throw new SDKValidationError(errorMessage, err, rawValue);\n    }\n    throw err;\n  }\n}\n\n/**\n * Utility function that executes some code which may result in a ZodError. It\n * intercepts this error and converts it to an SDKValidationError so as to not\n * leak Zod implementation details to user code.\n */\nexport function safeParse<Inp, Out>(\n  rawValue: Inp,\n  fn: (value: Inp) => Out,\n  errorMessage: string,\n): Result<Out, SDKValidationError> {\n  try {\n    return OK(fn(rawValue));\n  } catch (err) {\n    return ERR(new SDKValidationError(errorMessage, err, rawValue));\n  }\n}\n\nexport function collectExtraKeys<\n  Shape extends ZodRawShape,\n  Catchall extends ZodTypeAny,\n  K extends string,\n>(\n  obj: ZodObject<Shape, \"strip\", Catchall>,\n  extrasKey: K,\n): ZodEffects<\n  typeof obj,\n  & output<ZodObject<Shape, \"strict\">>\n  & {\n    [k in K]: Record<string, output<Catchall>>;\n  }\n> {\n  return obj.transform((val) => {\n    const extras: Record<string, output<Catchall>> = {};\n    const { shape } = obj;\n    for (const [key] of Object.entries(val)) {\n      if (key in shape) {\n        continue;\n      }\n\n      const v = val[key];\n      if (typeof v === \"undefined\") {\n        continue;\n      }\n\n      extras[key] = v;\n      delete val[key];\n    }\n\n    return { ...val, [extrasKey]: extras };\n  });\n}\n"],"mappings":";;AAAA;;;;;;AAoBAA,OAAA,CAAAC,KAAA,GAAAA,KAAA;AAoBAD,OAAA,CAAAE,SAAA,GAAAA,SAAA;AAYAF,OAAA,CAAAG,gBAAA,GAAAA,gBAAA;AAhDA,MAAAC,KAAA,GAAAC,OAAA;AAQA,MAAAC,uBAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AAEA;;;;;AAKA,SAAgBJ,KAAKA,CACnBO,QAAa,EACbC,EAAuB,EACvBC,YAAoB;EAEpB,IAAI;IACF,OAAOD,EAAE,CAACD,QAAQ,CAAC;EACrB,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZ,IAAIA,GAAG,YAAYP,KAAA,CAAAQ,QAAQ,EAAE;MAC3B,MAAM,IAAIN,uBAAA,CAAAO,kBAAkB,CAACH,YAAY,EAAEC,GAAG,EAAEH,QAAQ,CAAC;IAC3D;IACA,MAAMG,GAAG;EACX;AACF;AAEA;;;;;AAKA,SAAgBT,SAASA,CACvBM,QAAa,EACbC,EAAuB,EACvBC,YAAoB;EAEpB,IAAI;IACF,OAAO,IAAAH,OAAA,CAAAO,EAAE,EAACL,EAAE,CAACD,QAAQ,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZ,OAAO,IAAAJ,OAAA,CAAAQ,GAAG,EAAC,IAAIT,uBAAA,CAAAO,kBAAkB,CAACH,YAAY,EAAEC,GAAG,EAAEH,QAAQ,CAAC,CAAC;EACjE;AACF;AAEA,SAAgBL,gBAAgBA,CAK9Ba,GAAwC,EACxCC,SAAY;EAQZ,OAAOD,GAAG,CAACE,SAAS,CAAEC,GAAG,IAAI;IAC3B,MAAMC,MAAM,GAAqC,EAAE;IACnD,MAAM;MAAEC;IAAK,CAAE,GAAGL,GAAG;IACrB,KAAK,MAAM,CAACM,GAAG,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACL,GAAG,CAAC,EAAE;MACvC,IAAIG,GAAG,IAAID,KAAK,EAAE;QAChB;MACF;MAEA,MAAMI,CAAC,GAAGN,GAAG,CAACG,GAAG,CAAC;MAClB,IAAI,OAAOG,CAAC,KAAK,WAAW,EAAE;QAC5B;MACF;MAEAL,MAAM,CAACE,GAAG,CAAC,GAAGG,CAAC;MACf,OAAON,GAAG,CAACG,GAAG,CAAC;IACjB;IAEA,OAAO;MAAE,GAAGH,GAAG;MAAE,CAACF,SAAS,GAAGG;IAAM,CAAE;EACxC,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}