{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SDKValidationError = void 0;\nexports.formatZodError = formatZodError;\nconst z = __importStar(require(\"zod\"));\nclass SDKValidationError extends Error {\n  constructor(message, cause, rawValue) {\n    super(`${message}: ${cause}`);\n    this.name = \"SDKValidationError\";\n    this.cause = cause;\n    this.rawValue = rawValue;\n    this.rawMessage = message;\n  }\n  /**\r\n   * Return a pretty-formatted error message if the underlying validation error\r\n   * is a ZodError or some other recognized error type, otherwise return the\r\n   * default error message.\r\n   */\n  pretty() {\n    if (this.cause instanceof z.ZodError) {\n      return `${this.rawMessage}\\n${formatZodError(this.cause)}`;\n    } else {\n      return this.toString();\n    }\n  }\n}\nexports.SDKValidationError = SDKValidationError;\nfunction formatZodError(err, level = 0) {\n  let pre = \"  \".repeat(level);\n  pre = level > 0 ? `│${pre}` : pre;\n  pre += \" \".repeat(level);\n  let message = \"\";\n  const append = str => message += `\\n${pre}${str}`;\n  const len = err.issues.length;\n  const headline = len === 1 ? `${len} issue found` : `${len} issues found`;\n  if (len) {\n    append(`┌ ${headline}:`);\n  }\n  for (const issue of err.issues) {\n    let path = issue.path.join(\".\");\n    path = path ? `<root>.${path}` : \"<root>\";\n    append(`│ • [${path}]: ${issue.message} (${issue.code})`);\n    switch (issue.code) {\n      case \"invalid_literal\":\n      case \"invalid_type\":\n        {\n          append(`│     Want: ${issue.expected}`);\n          append(`│      Got: ${issue.received}`);\n          break;\n        }\n      case \"unrecognized_keys\":\n        {\n          append(`│     Keys: ${issue.keys.join(\", \")}`);\n          break;\n        }\n      case \"invalid_enum_value\":\n        {\n          append(`│     Allowed: ${issue.options.join(\", \")}`);\n          append(`│         Got: ${issue.received}`);\n          break;\n        }\n      case \"invalid_union_discriminator\":\n        {\n          append(`│     Allowed: ${issue.options.join(\", \")}`);\n          break;\n        }\n      case \"invalid_union\":\n        {\n          const len = issue.unionErrors.length;\n          append(`│   ✖︎ Attemped to deserialize into one of ${len} union members:`);\n          issue.unionErrors.forEach((err, i) => {\n            append(`│   ✖︎ Member ${i + 1} of ${len}`);\n            append(`${formatZodError(err, level + 1)}`);\n          });\n        }\n    }\n  }\n  if (err.issues.length) {\n    append(`└─*`);\n  }\n  return message.slice(1);\n}","map":{"version":3,"names":["exports","formatZodError","z","__importStar","require","SDKValidationError","Error","constructor","message","cause","rawValue","name","rawMessage","pretty","ZodError","toString","err","level","pre","repeat","append","str","len","issues","length","headline","issue","path","join","code","expected","received","keys","options","unionErrors","forEach","i","slice"],"sources":["C:\\Users\\silvi\\OneDrive\\Escritorio\\LUISDEEEE\\School of code\\WEEK 12 FINAL HACKATON\\HistoriansRule\\node_modules\\@mistralai\\mistralai\\src\\models\\errors\\sdkvalidationerror.ts"],"sourcesContent":["/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\r\n\r\nimport * as z from \"zod\";\r\n\r\nexport class SDKValidationError extends Error {\r\n  /**\r\n   * The raw value that failed validation.\r\n   */\r\n  public readonly rawValue: unknown;\r\n\r\n  /**\r\n   * The raw message that failed validation.\r\n   */\r\n  public readonly rawMessage: unknown;\r\n\r\n  constructor(message: string, cause: unknown, rawValue: unknown) {\r\n    super(`${message}: ${cause}`);\r\n    this.name = \"SDKValidationError\";\r\n    this.cause = cause;\r\n    this.rawValue = rawValue;\r\n    this.rawMessage = message;\r\n  }\r\n\r\n  /**\r\n   * Return a pretty-formatted error message if the underlying validation error\r\n   * is a ZodError or some other recognized error type, otherwise return the\r\n   * default error message.\r\n   */\r\n  public pretty(): string {\r\n    if (this.cause instanceof z.ZodError) {\r\n      return `${this.rawMessage}\\n${formatZodError(this.cause)}`;\r\n    } else {\r\n      return this.toString();\r\n    }\r\n  }\r\n}\r\n\r\nexport function formatZodError(err: z.ZodError, level = 0): string {\r\n  let pre = \"  \".repeat(level);\r\n  pre = level > 0 ? `│${pre}` : pre;\r\n  pre += \" \".repeat(level);\r\n\r\n  let message = \"\";\r\n  const append = (str: string) => (message += `\\n${pre}${str}`);\r\n\r\n  const len = err.issues.length;\r\n  const headline = len === 1 ? `${len} issue found` : `${len} issues found`;\r\n\r\n  if (len) {\r\n    append(`┌ ${headline}:`);\r\n  }\r\n\r\n  for (const issue of err.issues) {\r\n    let path = issue.path.join(\".\");\r\n    path = path ? `<root>.${path}` : \"<root>\";\r\n    append(`│ • [${path}]: ${issue.message} (${issue.code})`);\r\n    switch (issue.code) {\r\n      case \"invalid_literal\":\r\n      case \"invalid_type\": {\r\n        append(`│     Want: ${issue.expected}`);\r\n        append(`│      Got: ${issue.received}`);\r\n        break;\r\n      }\r\n      case \"unrecognized_keys\": {\r\n        append(`│     Keys: ${issue.keys.join(\", \")}`);\r\n        break;\r\n      }\r\n      case \"invalid_enum_value\": {\r\n        append(`│     Allowed: ${issue.options.join(\", \")}`);\r\n        append(`│         Got: ${issue.received}`);\r\n        break;\r\n      }\r\n      case \"invalid_union_discriminator\": {\r\n        append(`│     Allowed: ${issue.options.join(\", \")}`);\r\n        break;\r\n      }\r\n      case \"invalid_union\": {\r\n        const len = issue.unionErrors.length;\r\n        append(\r\n          `│   ✖︎ Attemped to deserialize into one of ${len} union members:`,\r\n        );\r\n        issue.unionErrors.forEach((err, i) => {\r\n          append(`│   ✖︎ Member ${i + 1} of ${len}`);\r\n          append(`${formatZodError(err, level + 1)}`);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  if (err.issues.length) {\r\n    append(`└─*`);\r\n  }\r\n\r\n  return message.slice(1);\r\n}\r\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCAA,OAAA,CAAAC,cAAA,GAAAA,cAAA;AAnCA,MAAAC,CAAA,GAAAC,YAAA,CAAAC,OAAA;AAEA,MAAaC,kBAAmB,SAAQC,KAAK;EAW3CC,YAAYC,OAAe,EAAEC,KAAc,EAAEC,QAAiB;IAC5D,KAAK,CAAC,GAAGF,OAAO,KAAKC,KAAK,EAAE,CAAC;IAC7B,IAAI,CAACE,IAAI,GAAG,oBAAoB;IAChC,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,UAAU,GAAGJ,OAAO;EAC3B;EAEA;;;;;EAKOK,MAAMA,CAAA;IACX,IAAI,IAAI,CAACJ,KAAK,YAAYP,CAAC,CAACY,QAAQ,EAAE;MACpC,OAAO,GAAG,IAAI,CAACF,UAAU,KAAKX,cAAc,CAAC,IAAI,CAACQ,KAAK,CAAC,EAAE;IAC5D,CAAC,MAAM;MACL,OAAO,IAAI,CAACM,QAAQ,EAAE;IACxB;EACF;;AA9BFf,OAAA,CAAAK,kBAAA,GAAAA,kBAAA;AAiCA,SAAgBJ,cAAcA,CAACe,GAAe,EAAEC,KAAK,GAAG,CAAC;EACvD,IAAIC,GAAG,GAAG,IAAI,CAACC,MAAM,CAACF,KAAK,CAAC;EAC5BC,GAAG,GAAGD,KAAK,GAAG,CAAC,GAAG,IAAIC,GAAG,EAAE,GAAGA,GAAG;EACjCA,GAAG,IAAI,GAAG,CAACC,MAAM,CAACF,KAAK,CAAC;EAExB,IAAIT,OAAO,GAAG,EAAE;EAChB,MAAMY,MAAM,GAAIC,GAAW,IAAMb,OAAO,IAAI,KAAKU,GAAG,GAAGG,GAAG,EAAG;EAE7D,MAAMC,GAAG,GAAGN,GAAG,CAACO,MAAM,CAACC,MAAM;EAC7B,MAAMC,QAAQ,GAAGH,GAAG,KAAK,CAAC,GAAG,GAAGA,GAAG,cAAc,GAAG,GAAGA,GAAG,eAAe;EAEzE,IAAIA,GAAG,EAAE;IACPF,MAAM,CAAC,KAAKK,QAAQ,GAAG,CAAC;EAC1B;EAEA,KAAK,MAAMC,KAAK,IAAIV,GAAG,CAACO,MAAM,EAAE;IAC9B,IAAII,IAAI,GAAGD,KAAK,CAACC,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC;IAC/BD,IAAI,GAAGA,IAAI,GAAG,UAAUA,IAAI,EAAE,GAAG,QAAQ;IACzCP,MAAM,CAAC,QAAQO,IAAI,MAAMD,KAAK,CAAClB,OAAO,KAAKkB,KAAK,CAACG,IAAI,GAAG,CAAC;IACzD,QAAQH,KAAK,CAACG,IAAI;MAChB,KAAK,iBAAiB;MACtB,KAAK,cAAc;QAAE;UACnBT,MAAM,CAAC,eAAeM,KAAK,CAACI,QAAQ,EAAE,CAAC;UACvCV,MAAM,CAAC,eAAeM,KAAK,CAACK,QAAQ,EAAE,CAAC;UACvC;QACF;MACA,KAAK,mBAAmB;QAAE;UACxBX,MAAM,CAAC,eAAeM,KAAK,CAACM,IAAI,CAACJ,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;UAC9C;QACF;MACA,KAAK,oBAAoB;QAAE;UACzBR,MAAM,CAAC,kBAAkBM,KAAK,CAACO,OAAO,CAACL,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;UACpDR,MAAM,CAAC,kBAAkBM,KAAK,CAACK,QAAQ,EAAE,CAAC;UAC1C;QACF;MACA,KAAK,6BAA6B;QAAE;UAClCX,MAAM,CAAC,kBAAkBM,KAAK,CAACO,OAAO,CAACL,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;UACpD;QACF;MACA,KAAK,eAAe;QAAE;UACpB,MAAMN,GAAG,GAAGI,KAAK,CAACQ,WAAW,CAACV,MAAM;UACpCJ,MAAM,CACJ,8CAA8CE,GAAG,iBAAiB,CACnE;UACDI,KAAK,CAACQ,WAAW,CAACC,OAAO,CAAC,CAACnB,GAAG,EAAEoB,CAAC,KAAI;YACnChB,MAAM,CAAC,iBAAiBgB,CAAC,GAAG,CAAC,OAAOd,GAAG,EAAE,CAAC;YAC1CF,MAAM,CAAC,GAAGnB,cAAc,CAACe,GAAG,EAAEC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;UAC7C,CAAC,CAAC;QACJ;IACF;EACF;EAEA,IAAID,GAAG,CAACO,MAAM,CAACC,MAAM,EAAE;IACrBJ,MAAM,CAAC,KAAK,CAAC;EACf;EAEA,OAAOZ,OAAO,CAAC6B,KAAK,CAAC,CAAC,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}