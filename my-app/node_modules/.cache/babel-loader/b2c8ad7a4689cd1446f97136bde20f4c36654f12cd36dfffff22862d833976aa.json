{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.remap = remap;\n/**\r\n * Converts or omits an object's keys according to a mapping.\r\n *\r\n * @param inp An object whose keys will be remapped\r\n * @param mappings A mapping of original keys to new keys. If a key is not present in the mapping, it will be left as is. If a key is mapped to `null`, it will be removed in the resulting object.\r\n * @returns A new object with keys remapped or omitted according to the mappings\r\n */\nfunction remap(inp, mappings) {\n  let out = {};\n  if (!Object.keys(mappings).length) {\n    out = inp;\n    return out;\n  }\n  for (const [k, v] of Object.entries(inp)) {\n    const j = mappings[k];\n    if (j === null) {\n      continue;\n    }\n    out[j !== null && j !== void 0 ? j : k] = v;\n  }\n  return out;\n}","map":{"version":3,"names":["exports","remap","inp","mappings","out","Object","keys","length","k","v","entries","j"],"sources":["C:\\Users\\silvi\\OneDrive\\Escritorio\\LUISDEEEE\\School of code\\WEEK 12 FINAL HACKATON\\HistoriansRule\\node_modules\\@mistralai\\mistralai\\src\\lib\\primitives.ts"],"sourcesContent":["/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\r\n\r\nexport type Remap<Inp, Mapping extends { [k in keyof Inp]?: string | null }> = {\r\n  [k in keyof Inp as Mapping[k] extends string /* if we have a string mapping for this key then use it */\r\n    ? Mapping[k]\r\n    : Mapping[k] extends null /* if the mapping is to `null` then drop the key */\r\n    ? never\r\n    : k /* otherwise keep the key as-is */]: Inp[k];\r\n};\r\n\r\n/**\r\n * Converts or omits an object's keys according to a mapping.\r\n *\r\n * @param inp An object whose keys will be remapped\r\n * @param mappings A mapping of original keys to new keys. If a key is not present in the mapping, it will be left as is. If a key is mapped to `null`, it will be removed in the resulting object.\r\n * @returns A new object with keys remapped or omitted according to the mappings\r\n */\r\nexport function remap<\r\n  Inp extends Record<string, unknown>,\r\n  const Mapping extends { [k in keyof Inp]?: string | null },\r\n>(inp: Inp, mappings: Mapping): Remap<Inp, Mapping> {\r\n  let out: any = {};\r\n\r\n  if (!Object.keys(mappings).length) {\r\n    out = inp;\r\n    return out;\r\n  }\r\n\r\n  for (const [k, v] of Object.entries(inp)) {\r\n    const j = mappings[k];\r\n    if (j === null) {\r\n      continue;\r\n    }\r\n    out[j ?? k] = v;\r\n  }\r\n\r\n  return out;\r\n}\r\n"],"mappings":";;AAAA;;;;;;AAmBAA,OAAA,CAAAC,KAAA,GAAAA,KAAA;AAPA;;;;;;;AAOA,SAAgBA,KAAKA,CAGnBC,GAAQ,EAAEC,QAAiB;EAC3B,IAAIC,GAAG,GAAQ,EAAE;EAEjB,IAAI,CAACC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,CAACI,MAAM,EAAE;IACjCH,GAAG,GAAGF,GAAG;IACT,OAAOE,GAAG;EACZ;EAEA,KAAK,MAAM,CAACI,CAAC,EAAEC,CAAC,CAAC,IAAIJ,MAAM,CAACK,OAAO,CAACR,GAAG,CAAC,EAAE;IACxC,MAAMS,CAAC,GAAGR,QAAQ,CAACK,CAAC,CAAC;IACrB,IAAIG,CAAC,KAAK,IAAI,EAAE;MACd;IACF;IACAP,GAAG,CAACO,CAAC,aAADA,CAAC,cAADA,CAAC,GAAIH,CAAC,CAAC,GAAGC,CAAC;EACjB;EAEA,OAAOL,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}