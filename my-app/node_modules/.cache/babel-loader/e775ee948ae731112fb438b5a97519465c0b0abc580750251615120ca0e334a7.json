{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToolChoice$ = exports.ToolChoice$outboundSchema = exports.ToolChoice$inboundSchema = void 0;\nconst z = __importStar(require(\"zod\"));\nconst functionname_js_1 = require(\"./functionname.js\");\nconst tooltypes_js_1 = require(\"./tooltypes.js\");\n/** @internal */\nexports.ToolChoice$inboundSchema = z.object({\n  type: tooltypes_js_1.ToolTypes$inboundSchema.optional(),\n  function: functionname_js_1.FunctionName$inboundSchema\n});\n/** @internal */\nexports.ToolChoice$outboundSchema = z.object({\n  type: tooltypes_js_1.ToolTypes$outboundSchema.optional(),\n  function: functionname_js_1.FunctionName$outboundSchema\n});\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\nvar ToolChoice$;\n(function (ToolChoice$) {\n  /** @deprecated use `ToolChoice$inboundSchema` instead. */\n  ToolChoice$.inboundSchema = exports.ToolChoice$inboundSchema;\n  /** @deprecated use `ToolChoice$outboundSchema` instead. */\n  ToolChoice$.outboundSchema = exports.ToolChoice$outboundSchema;\n})(ToolChoice$ || (exports.ToolChoice$ = ToolChoice$ = {}));","map":{"version":3,"names":["z","__importStar","require","functionname_js_1","tooltypes_js_1","exports","ToolChoice$inboundSchema","object","type","ToolTypes$inboundSchema","optional","function","FunctionName$inboundSchema","ToolChoice$outboundSchema","ToolTypes$outboundSchema","FunctionName$outboundSchema","ToolChoice$","inboundSchema","outboundSchema"],"sources":["C:\\Users\\silvi\\OneDrive\\Escritorio\\LUISDEEEE\\School of code\\WEEK 12 FINAL HACKATON\\HistoriansRule\\node_modules\\@mistralai\\mistralai\\src\\models\\components\\toolchoice.ts"],"sourcesContent":["/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\r\n\r\nimport * as z from \"zod\";\r\nimport {\r\n  FunctionName,\r\n  FunctionName$inboundSchema,\r\n  FunctionName$Outbound,\r\n  FunctionName$outboundSchema,\r\n} from \"./functionname.js\";\r\nimport {\r\n  ToolTypes,\r\n  ToolTypes$inboundSchema,\r\n  ToolTypes$outboundSchema,\r\n} from \"./tooltypes.js\";\r\n\r\n/**\r\n * ToolChoice is either a ToolChoiceEnum or a ToolChoice\r\n */\r\nexport type ToolChoice = {\r\n  type?: ToolTypes | undefined;\r\n  /**\r\n   * this restriction of `Function` is used to select a specific function to call\r\n   */\r\n  function: FunctionName;\r\n};\r\n\r\n/** @internal */\r\nexport const ToolChoice$inboundSchema: z.ZodType<\r\n  ToolChoice,\r\n  z.ZodTypeDef,\r\n  unknown\r\n> = z.object({\r\n  type: ToolTypes$inboundSchema.optional(),\r\n  function: FunctionName$inboundSchema,\r\n});\r\n\r\n/** @internal */\r\nexport type ToolChoice$Outbound = {\r\n  type?: string | undefined;\r\n  function: FunctionName$Outbound;\r\n};\r\n\r\n/** @internal */\r\nexport const ToolChoice$outboundSchema: z.ZodType<\r\n  ToolChoice$Outbound,\r\n  z.ZodTypeDef,\r\n  ToolChoice\r\n> = z.object({\r\n  type: ToolTypes$outboundSchema.optional(),\r\n  function: FunctionName$outboundSchema,\r\n});\r\n\r\n/**\r\n * @internal\r\n * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.\r\n */\r\nexport namespace ToolChoice$ {\r\n  /** @deprecated use `ToolChoice$inboundSchema` instead. */\r\n  export const inboundSchema = ToolChoice$inboundSchema;\r\n  /** @deprecated use `ToolChoice$outboundSchema` instead. */\r\n  export const outboundSchema = ToolChoice$outboundSchema;\r\n  /** @deprecated use `ToolChoice$Outbound` instead. */\r\n  export type Outbound = ToolChoice$Outbound;\r\n}\r\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,MAAAA,CAAA,GAAAC,YAAA,CAAAC,OAAA;AACA,MAAAC,iBAAA,GAAAD,OAAA;AAMA,MAAAE,cAAA,GAAAF,OAAA;AAiBA;AACaG,OAAA,CAAAC,wBAAwB,GAIjCN,CAAC,CAACO,MAAM,CAAC;EACXC,IAAI,EAAEJ,cAAA,CAAAK,uBAAuB,CAACC,QAAQ,EAAE;EACxCC,QAAQ,EAAER,iBAAA,CAAAS;CACX,CAAC;AAQF;AACaP,OAAA,CAAAQ,yBAAyB,GAIlCb,CAAC,CAACO,MAAM,CAAC;EACXC,IAAI,EAAEJ,cAAA,CAAAU,wBAAwB,CAACJ,QAAQ,EAAE;EACzCC,QAAQ,EAAER,iBAAA,CAAAY;CACX,CAAC;AAEF;;;;AAIA,IAAiBC,WAAW;AAA5B,WAAiBA,WAAW;EAC1B;EACaA,WAAA,CAAAC,aAAa,GAAGZ,OAAA,CAAAC,wBAAwB;EACrD;EACaU,WAAA,CAAAE,cAAc,GAAGb,OAAA,CAAAQ,yBAAyB;AAGzD,CAAC,EAPgBG,WAAW,KAAAX,OAAA,CAAAW,WAAA,GAAXA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}