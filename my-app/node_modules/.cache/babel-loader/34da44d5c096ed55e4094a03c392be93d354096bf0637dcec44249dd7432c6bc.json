{"ast":null,"code":"\"use strict\";\n\n/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Fim = void 0;\nconst fimComplete_js_1 = require(\"../funcs/fimComplete.js\");\nconst fimStream_js_1 = require(\"../funcs/fimStream.js\");\nconst sdks_js_1 = require(\"../lib/sdks.js\");\nconst fp_js_1 = require(\"../types/fp.js\");\nclass Fim extends sdks_js_1.ClientSDK {\n  /**\r\n   * Fim Completion\r\n   *\r\n   * @remarks\r\n   * FIM completion.\r\n   */\n  async complete(request, options) {\n    return (0, fp_js_1.unwrapAsync)((0, fimComplete_js_1.fimComplete)(this, request, options));\n  }\n  /**\r\n   * Stream fim completion\r\n   *\r\n   * @remarks\r\n   * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.\r\n   */\n  async stream(request, options) {\n    return (0, fp_js_1.unwrapAsync)((0, fimStream_js_1.fimStream)(this, request, options));\n  }\n}\nexports.Fim = Fim;","map":{"version":3,"names":["fimComplete_js_1","require","fimStream_js_1","sdks_js_1","fp_js_1","Fim","ClientSDK","complete","request","options","unwrapAsync","fimComplete","stream","fimStream","exports"],"sources":["C:\\Users\\silvi\\OneDrive\\Escritorio\\LUISDEEEE\\School of code\\WEEK 12 FINAL HACKATON\\HistoriansRule\\node_modules\\@mistralai\\mistralai\\src\\sdk\\fim.ts"],"sourcesContent":["/*\r\n * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.\r\n */\r\n\r\nimport { fimComplete } from \"../funcs/fimComplete.js\";\r\nimport { fimStream } from \"../funcs/fimStream.js\";\r\nimport { EventStream } from \"../lib/event-streams.js\";\r\nimport { ClientSDK, RequestOptions } from \"../lib/sdks.js\";\r\nimport * as components from \"../models/components/index.js\";\r\nimport { unwrapAsync } from \"../types/fp.js\";\r\n\r\nexport class Fim extends ClientSDK {\r\n  /**\r\n   * Fim Completion\r\n   *\r\n   * @remarks\r\n   * FIM completion.\r\n   */\r\n  async complete(\r\n    request: components.FIMCompletionRequest,\r\n    options?: RequestOptions,\r\n  ): Promise<components.FIMCompletionResponse> {\r\n    return unwrapAsync(fimComplete(\r\n      this,\r\n      request,\r\n      options,\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Stream fim completion\r\n   *\r\n   * @remarks\r\n   * Mistral AI provides the ability to stream responses back to a client in order to allow partial results for certain requests. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.\r\n   */\r\n  async stream(\r\n    request: components.FIMCompletionStreamRequest,\r\n    options?: RequestOptions,\r\n  ): Promise<EventStream<components.CompletionEvent>> {\r\n    return unwrapAsync(fimStream(\r\n      this,\r\n      request,\r\n      options,\r\n    ));\r\n  }\r\n}\r\n"],"mappings":";;AAAA;;;;;;;AAIA,MAAAA,gBAAA,GAAAC,OAAA;AACA,MAAAC,cAAA,GAAAD,OAAA;AAEA,MAAAE,SAAA,GAAAF,OAAA;AAEA,MAAAG,OAAA,GAAAH,OAAA;AAEA,MAAaI,GAAI,SAAQF,SAAA,CAAAG,SAAS;EAChC;;;;;;EAMA,MAAMC,QAAQA,CACZC,OAAwC,EACxCC,OAAwB;IAExB,OAAO,IAAAL,OAAA,CAAAM,WAAW,EAAC,IAAAV,gBAAA,CAAAW,WAAW,EAC5B,IAAI,EACJH,OAAO,EACPC,OAAO,CACR,CAAC;EACJ;EAEA;;;;;;EAMA,MAAMG,MAAMA,CACVJ,OAA8C,EAC9CC,OAAwB;IAExB,OAAO,IAAAL,OAAA,CAAAM,WAAW,EAAC,IAAAR,cAAA,CAAAW,SAAS,EAC1B,IAAI,EACJL,OAAO,EACPC,OAAO,CACR,CAAC;EACJ;;AAjCFK,OAAA,CAAAT,GAAA,GAAAA,GAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}